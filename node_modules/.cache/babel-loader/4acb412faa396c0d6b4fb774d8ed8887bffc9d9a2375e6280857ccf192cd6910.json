{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anne_\\\\Documents\\\\GitHub5\\\\CISC490Calendar\\\\src\\\\components\\\\DayDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo, useState, useEffect } from 'react';\nimport RecurringOptionsModal from './RecurringOptionsModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst getLocalDateString = date => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\nconst generateRecurringDates = (startDate, recurringOptions) => {\n  const dates = [];\n  const start = new Date(startDate);\n  const end = new Date(recurringOptions.endDate);\n  let currentDate = new Date(start);\n\n  // Validate dates\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n    console.error('Invalid start or end date');\n    return dates;\n  }\n\n  // Ensure interval is valid\n  const interval = Math.max(1, parseInt(recurringOptions.interval) || 1);\n  while (currentDate <= end) {\n    if (recurringOptions.frequency === 'daily') {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + interval);\n    } else if (recurringOptions.frequency === 'weekly') {\n      // Ensure weekDays is an array of valid day numbers (0-6)\n      const validWeekDays = recurringOptions.weekDays.map(day => parseInt(day)).filter(day => !isNaN(day) && day >= 0 && day <= 6);\n      if (validWeekDays.includes(currentDate.getDay())) {\n        dates.push(new Date(currentDate));\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n\n      // If we've completed a week and have an interval > 1, skip ahead\n      if (currentDate.getDay() === 0 && interval > 1) {\n        currentDate.setDate(currentDate.getDate() + (interval - 1) * 7);\n      }\n    } else if (recurringOptions.frequency === 'monthly') {\n      dates.push(new Date(currentDate));\n      const oldMonth = currentDate.getMonth();\n      currentDate.setMonth(currentDate.getMonth() + interval);\n\n      // Handle month skipping (e.g., Jan 31 to Feb 31 should go to Feb 28)\n      if (currentDate.getMonth() > (oldMonth + interval) % 12) {\n        currentDate.setDate(0); // Set to last day of previous month\n      }\n    } else if (recurringOptions.frequency === 'yearly') {\n      dates.push(new Date(currentDate));\n      currentDate.setFullYear(currentDate.getFullYear() + interval);\n    }\n\n    // Safety check to prevent infinite loops\n    if (dates.length > 1000) {\n      console.warn('Too many recurring dates generated, truncating to 1000');\n      break;\n    }\n  }\n  return dates;\n};\nfunction DayDetails({\n  selectedDate,\n  setSelectedDate,\n  events,\n  setEvents\n}) {\n  _s();\n  const [newTask, setNewTask] = useState({\n    title: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    category: 'Work',\n    priority: 'Medium',\n    recurring: false\n  });\n  const [recurringModalOpen, setRecurringModalOpen] = useState(false);\n  const [recurringOptions, setRecurringOptions] = useState({\n    frequency: 'daily',\n    weekDays: [],\n    endDate: '',\n    interval: 1\n  });\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(null);\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false);\n  const [confirmAction, setConfirmAction] = useState(null);\n  const [confirmMessage, setConfirmMessage] = useState('');\n  const [pendingTask, setPendingTask] = useState(null);\n  const [lastAction, setLastAction] = useState(null);\n  const [showUndo, setShowUndo] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [deletedTasks, setDeletedTasks] = useState([]);\n  const [showUndoNotification, setShowUndoNotification] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [deleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\n  const [taskToDelete, setTaskToDelete] = useState(null);\n  const categories = useMemo(() => ['Work', 'Personal', 'School'], []);\n  const priorities = ['Low', 'Medium', 'High', 'Critical'];\n  const months = useMemo(() => ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'], []);\n  const years = useMemo(() => {\n    const currentYear = new Date().getFullYear();\n    return Array.from({\n      length: 20\n    }, (_, i) => currentYear - 10 + i);\n  }, []);\n  const handleRecurringChange = checked => {\n    if (selectedTask) {\n      setSelectedTask({\n        ...selectedTask,\n        recurring: checked,\n        recurringOptions: checked ? {\n          frequency: 'daily',\n          weekDays: [],\n          endDate: '',\n          interval: 1\n        } : null\n      });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    } else {\n      setNewTask({\n        ...newTask,\n        recurring: checked,\n        recurringOptions: checked ? {\n          frequency: 'daily',\n          weekDays: [],\n          endDate: '',\n          interval: 1\n        } : null\n      });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    }\n  };\n  const handleRecurringOptionsSave = options => {\n    if (selectedTask) {\n      setSelectedTask({\n        ...selectedTask,\n        recurringOptions: options,\n        recurring: true\n      });\n    } else {\n      setNewTask({\n        ...newTask,\n        recurringOptions: options,\n        recurring: true\n      });\n    }\n    setRecurringModalOpen(false);\n  };\n  const validateTimeInputs = (startTime, endTime) => {\n    const errors = {};\n\n    // Check if times are provided\n    if (!startTime) {\n      errors.startTime = 'Start time is required';\n    }\n    if (!endTime) {\n      errors.endTime = 'End time is required';\n    }\n\n    // Validate time format\n    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n    if (startTime && !timeRegex.test(startTime)) {\n      errors.startTime = 'Invalid time format';\n    }\n    if (endTime && !timeRegex.test(endTime)) {\n      errors.endTime = 'Invalid time format';\n    }\n    if (startTime && endTime && timeRegex.test(startTime) && timeRegex.test(endTime)) {\n      const [startHour, startMinute] = startTime.split(':').map(Number);\n      const [endHour, endMinute] = endTime.split(':').map(Number);\n      const startMinutes = startHour * 60 + startMinute;\n      const endMinutes = endHour * 60 + endMinute;\n\n      // Handle events spanning midnight\n      if (endMinutes <= startMinutes && endMinutes !== 0) {\n        errors.endTime = 'End time must be after start time';\n      }\n    }\n    return errors;\n  };\n  const checkForOverlappingEvents = (startTime, endTime, taskId = null, date = null) => {\n    if (!startTime || !endTime) return false;\n    const [startHour, startMinute] = startTime.split(':').map(Number);\n    const [endHour, endMinute] = endTime.split(':').map(Number);\n    const newStartMinutes = startHour * 60 + startMinute;\n    const newEndMinutes = endHour * 60 + endMinute;\n    const targetDate = date || getLocalDateString(selectedDate);\n    return events.some(task => {\n      // Skip self when editing\n      if (taskId && task.taskId === taskId) return false;\n\n      // Only check events on the same day\n      if (task.date !== targetDate) return false;\n      const [taskStartHour, taskStartMinute] = task.startTime.split(':').map(Number);\n      const [taskEndHour, taskEndMinute] = task.endTime.split(':').map(Number);\n      const taskStartMinutes = taskStartHour * 60 + taskStartMinute;\n      const taskEndMinutes = taskEndHour * 60 + taskEndMinute;\n\n      // Handle events spanning midnight\n      const normalizedNewEnd = newEndMinutes < newStartMinutes ? newEndMinutes + 1440 : newEndMinutes;\n      const normalizedTaskEnd = taskEndMinutes < taskStartMinutes ? taskEndMinutes + 1440 : taskEndMinutes;\n\n      // Check if events overlap\n      const overlaps = newStartMinutes < normalizedTaskEnd && normalizedNewEnd > taskStartMinutes || newStartMinutes === taskStartMinutes && normalizedNewEnd === normalizedTaskEnd;\n      if (overlaps) {\n        console.log('Overlap detected:', {\n          new: {\n            start: startTime,\n            end: endTime\n          },\n          existing: {\n            start: task.startTime,\n            end: task.endTime\n          }\n        });\n      }\n      return overlaps;\n    });\n  };\n  const handleAddTask = async (allowOverlap = false) => {\n    try {\n      var _newTask$title, _newTask$recurringOpt, _newTask$description;\n      setIsLoading(true);\n      setErrorMessage('');\n\n      // Validate required fields\n      if (!((_newTask$title = newTask.title) !== null && _newTask$title !== void 0 && _newTask$title.trim())) {\n        setErrors({\n          title: 'Title is required'\n        });\n        return;\n      }\n      const timeErrors = validateTimeInputs(newTask.startTime, newTask.endTime);\n      if (Object.keys(timeErrors).length > 0) {\n        setErrors(timeErrors);\n        return;\n      }\n\n      // Only check for overlaps if allowOverlap is false\n      if (!allowOverlap && checkForOverlappingEvents(newTask.startTime, newTask.endTime)) {\n        setErrors({\n          overlap: 'This event overlaps with an existing event'\n        });\n        return;\n      }\n\n      // Validate recurring options if task is recurring\n      if (newTask.recurring && (!((_newTask$recurringOpt = newTask.recurringOptions) !== null && _newTask$recurringOpt !== void 0 && _newTask$recurringOpt.endDate) || newTask.recurringOptions.frequency === 'weekly' && (!newTask.recurringOptions.weekDays || newTask.recurringOptions.weekDays.length === 0))) {\n        setErrors({\n          recurring: 'Please complete recurring event settings'\n        });\n        return;\n      }\n      setErrors({});\n      const taskData = {\n        taskId: Date.now().toString(),\n        title: newTask.title.trim(),\n        description: ((_newTask$description = newTask.description) === null || _newTask$description === void 0 ? void 0 : _newTask$description.trim()) || '',\n        startTime: newTask.startTime,\n        endTime: newTask.endTime,\n        category: newTask.category || 'Work',\n        priority: newTask.priority || 'Medium',\n        recurring: newTask.recurring,\n        recurringOptions: newTask.recurring ? {\n          ...newTask.recurringOptions,\n          interval: Math.max(1, parseInt(newTask.recurringOptions.interval) || 1)\n        } : null,\n        metadata: {\n          createdBy: 'CurrentUser',\n          createdAt: new Date().toISOString(),\n          lastUpdated: new Date().toISOString()\n        },\n        date: getLocalDateString(selectedDate)\n      };\n      let tasksToAdd = [taskData];\n      if (taskData.recurring && taskData.recurringOptions) {\n        try {\n          const recurringDates = generateRecurringDates(new Date(`${taskData.date}T${taskData.startTime}`), taskData.recurringOptions);\n          if (recurringDates.length === 0) {\n            setErrors({\n              recurring: 'No valid recurring dates were generated'\n            });\n            return;\n          }\n          tasksToAdd = recurringDates.map((date, index) => {\n            const startTime = date.toTimeString().slice(0, 5);\n            const durationMs = new Date(`1970/01/01 ${taskData.endTime}`).getTime() - new Date(`1970/01/01 ${taskData.startTime}`).getTime();\n            const endTime = new Date(date.getTime() + durationMs).toTimeString().slice(0, 5);\n            return {\n              ...taskData,\n              taskId: `${taskData.taskId}-${index}`,\n              date: getLocalDateString(date),\n              startTime,\n              endTime,\n              metadata: {\n                ...taskData.metadata,\n                recurringGroupId: taskData.taskId\n              }\n            };\n          });\n        } catch (error) {\n          console.error('Error generating recurring dates:', error);\n          setErrors({\n            recurring: 'Error generating recurring dates'\n          });\n          return;\n        }\n      }\n\n      // Check storage limit before saving\n      try {\n        const updatedEvents = [...events, ...tasksToAdd];\n        const eventsJson = JSON.stringify(updatedEvents);\n        if (eventsJson.length > 5242880) {\n          // 5MB limit\n          setErrorMessage('Storage limit exceeded. Please delete some tasks.');\n          return;\n        }\n        localStorage.setItem('tasks', eventsJson);\n      } catch (e) {\n        if (e.name === 'QuotaExceededError') {\n          setErrorMessage('Storage limit exceeded. Please delete some tasks.');\n          return;\n        }\n        throw e;\n      }\n      setLastAction({\n        type: 'add',\n        tasks: tasksToAdd,\n        previousEvents: [...events]\n      });\n      setEvents(prevEvents => [...prevEvents, ...tasksToAdd]);\n      setShowUndo(true);\n      setTimeout(() => setShowUndo(false), 5000);\n\n      // Reset form\n      setNewTask({\n        title: '',\n        description: '',\n        startTime: '',\n        endTime: '',\n        category: 'Work',\n        priority: 'Medium',\n        recurring: false\n      });\n      setRecurringOptions({\n        frequency: 'daily',\n        weekDays: [],\n        endDate: '',\n        interval: 1\n      });\n    } catch (error) {\n      console.error('Error adding task:', error);\n      setErrorMessage('An error occurred while adding the task. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleUpdateTask = (taskId, updatedTask) => {\n    setEvents(prevEvents => prevEvents.map(task => task.taskId === taskId ? {\n      ...task,\n      ...updatedTask,\n      metadata: {\n        ...task.metadata,\n        lastUpdated: new Date().toISOString()\n      }\n    } : task));\n  };\n  const handleEditTask = task => {\n    const timeErrors = validateTimeInputs(task.startTime, task.endTime);\n    if (Object.keys(timeErrors).length > 0) {\n      setErrors(timeErrors);\n      return;\n    }\n    if (checkForOverlappingEvents(task.startTime, task.endTime, task.taskId, task.date)) {\n      setErrors({\n        overlap: 'This event overlaps with an existing event'\n      });\n      return;\n    }\n    setErrors({});\n    if (task.recurring) {\n      setConfirmMessage('This is a recurring event. Would you like to edit all instances or just this one?');\n      setConfirmAction('edit');\n      setPendingTask(task);\n      setConfirmModalOpen(true);\n    } else {\n      setSelectedTask(task);\n      setEditModalOpen(true);\n    }\n  };\n  const handleDeleteTask = task => {\n    if (!task) return;\n    setTaskToDelete(task);\n    setDeleteConfirmModalOpen(true);\n  };\n  const confirmDelete = () => {\n    if (!taskToDelete) return;\n    if (taskToDelete.recurring) {\n      setConfirmMessage('This is a recurring event. Would you like to delete all instances or just this one?');\n      setConfirmAction('delete');\n      setPendingTask(taskToDelete);\n      setConfirmModalOpen(true);\n    } else {\n      const updatedEvents = events.filter(e => e.taskId !== taskToDelete.taskId);\n      try {\n        // Save to localStorage before updating state\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\n\n        // Store the action for undo\n        setLastAction({\n          type: 'delete',\n          tasks: [taskToDelete],\n          previousEvents: [...events]\n        });\n        setEvents(updatedEvents);\n        setShowUndo(true);\n        setTimeout(() => setShowUndo(false), 5000);\n      } catch (error) {\n        console.error('Error deleting task:', error);\n        setErrorMessage('Failed to delete task. Please try again.');\n      }\n    }\n    setDeleteConfirmModalOpen(false);\n    setTaskToDelete(null);\n  };\n  const handleDeleteRecurring = action => {\n    if (!pendingTask) return;\n    try {\n      let updatedEvents;\n      let deletedTasks;\n      if (action === 'all') {\n        // For recurring events, match the base taskId (before the hyphen)\n        const baseTaskId = pendingTask.taskId.split('-')[0];\n        deletedTasks = events.filter(event => {\n          var _event$metadata;\n          return event.taskId === pendingTask.taskId || ((_event$metadata = event.metadata) === null || _event$metadata === void 0 ? void 0 : _event$metadata.recurringGroupId) === baseTaskId;\n        });\n        updatedEvents = events.filter(event => {\n          var _event$metadata2;\n          return event.taskId !== pendingTask.taskId && ((_event$metadata2 = event.metadata) === null || _event$metadata2 === void 0 ? void 0 : _event$metadata2.recurringGroupId) !== baseTaskId;\n        });\n      } else {\n        // Delete only the selected instance\n        deletedTasks = [pendingTask];\n        updatedEvents = events.filter(event => event.taskId !== pendingTask.taskId);\n      }\n\n      // Save to localStorage before updating state\n      localStorage.setItem('tasks', JSON.stringify(updatedEvents));\n\n      // Store the action for undo\n      setLastAction({\n        type: 'delete',\n        tasks: deletedTasks,\n        previousEvents: [...events]\n      });\n      setEvents(updatedEvents);\n      setShowUndo(true);\n      setTimeout(() => setShowUndo(false), 5000);\n    } catch (error) {\n      console.error('Error deleting recurring task:', error);\n      setErrorMessage('Failed to delete recurring task. Please try again.');\n    } finally {\n      setConfirmModalOpen(false);\n      setPendingTask(null);\n    }\n  };\n  const handleConfirmAction = action => {\n    if (action === 'cancel') {\n      setConfirmModalOpen(false);\n      setPendingTask(null);\n      return;\n    }\n    if (confirmAction === 'edit') {\n      if (pendingTask) {\n        if (action === 'all') {\n          setSelectedTask(pendingTask);\n          setEditModalOpen(true);\n        } else if (action === 'single') {\n          setSelectedTask(pendingTask);\n          setEditModalOpen(true);\n        }\n      }\n    } else if (confirmAction === 'delete') {\n      if (pendingTask) {\n        if (action === 'all' && pendingTask.recurringOptions) {\n          // Delete all instances of the recurring event by matching the base taskId\n          const baseTaskId = pendingTask.taskId.split('-')[0];\n          setEvents(prevEvents => prevEvents.filter(task => !task.taskId.startsWith(baseTaskId)));\n        } else if (action === 'single') {\n          // Delete only this instance\n          setEvents(prevEvents => prevEvents.filter(task => task.taskId !== pendingTask.taskId));\n        }\n      }\n    }\n    setConfirmModalOpen(false);\n    setPendingTask(null);\n  };\n  const dayTasks = useMemo(() => {\n    const filteredTasks = events.filter(task => task.date === getLocalDateString(selectedDate)).sort((a, b) => new Date(`1970/01/01 ${a.startTime}`) - new Date(`1970/01/01 ${b.startTime}`));\n    return filteredTasks;\n  }, [events, selectedDate]);\n  useEffect(() => {\n    console.log('DayDetails selectedDate:', selectedDate, 'Normalized:', getLocalDateString(selectedDate));\n    console.log('DayDetails events:', events);\n    console.log('DayDetails dayTasks:', dayTasks);\n  }, [selectedDate, events, dayTasks]);\n  const getPriorityColor = priority => {\n    switch (priority) {\n      case 'Low':\n        return '#A8CCDC';\n      case 'Medium':\n        return '#DDA853';\n      case 'High':\n        return '#164046';\n      case 'Critical':\n        return '#FF0000';\n      default:\n        return '#FFFFFF';\n    }\n  };\n  const toggleTask = taskId => {\n    const task = events.find(t => t.taskId === taskId);\n    if (task) {\n      const updatedTask = {\n        ...task,\n        completed: !task.completed,\n        metadata: {\n          ...task.metadata,\n          lastUpdated: new Date().toISOString()\n        }\n      };\n      handleUpdateTask(taskId, updatedTask);\n    }\n  };\n  const handlePreviousDay = () => {\n    const prevDate = new Date(selectedDate);\n    prevDate.setDate(prevDate.getDate() - 1);\n    setSelectedDate(prevDate);\n  };\n  const handleNextDay = () => {\n    const nextDate = new Date(selectedDate);\n    nextDate.setDate(nextDate.getDate() + 1);\n    setSelectedDate(nextDate);\n  };\n  const handleToday = () => {\n    setSelectedDate(new Date());\n  };\n  const handleDateChange = (year, month, day) => {\n    const newDate = new Date(year, month, day);\n    if (!isNaN(newDate.getTime())) {\n      setSelectedDate(newDate);\n    }\n  };\n  const handleInputChange = (field, value) => {\n    setNewTask(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n  const formatTime12Hour = time => {\n    const [hours, minutes] = time.split(':').map(Number);\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const adjustedHours = hours % 12 || 12;\n    return `${adjustedHours}:${minutes.toString().padStart(2, '0')} ${period}`;\n  };\n  const handleSaveEdit = (allowOverlap = false) => {\n    var _selectedTask$recurri;\n    if (!selectedTask) return;\n    const timeErrors = validateTimeInputs(selectedTask.startTime, selectedTask.endTime);\n    if (Object.keys(timeErrors).length > 0) {\n      setErrors(timeErrors);\n      return;\n    }\n\n    // Only check for overlaps if allowOverlap is false\n    if (!allowOverlap && checkForOverlappingEvents(selectedTask.startTime, selectedTask.endTime, selectedTask.taskId, selectedTask.date)) {\n      setErrors({\n        overlap: 'This event overlaps with an existing event'\n      });\n      return;\n    }\n    if (!selectedTask.title.trim()) {\n      setErrors({\n        title: 'Title is required'\n      });\n      return;\n    }\n\n    // Validate recurring options if task is recurring\n    if (selectedTask.recurring && (!((_selectedTask$recurri = selectedTask.recurringOptions) !== null && _selectedTask$recurri !== void 0 && _selectedTask$recurri.endDate) || selectedTask.recurringOptions.frequency === 'weekly' && (!selectedTask.recurringOptions.weekDays || selectedTask.recurringOptions.weekDays.length === 0))) {\n      setErrors({\n        recurring: 'Please complete recurring event settings'\n      });\n      return;\n    }\n    try {\n      let tasksToUpdate = [];\n      const baseTaskId = selectedTask.taskId.split('-')[0];\n      if (selectedTask.recurring && selectedTask.recurringOptions) {\n        // Generate new recurring dates\n        const recurringDates = generateRecurringDates(new Date(`${selectedTask.date}T${selectedTask.startTime}`), selectedTask.recurringOptions);\n        if (recurringDates.length === 0) {\n          setErrors({\n            recurring: 'No valid recurring dates were generated'\n          });\n          return;\n        }\n\n        // Create updated tasks for all recurring instances\n        tasksToUpdate = recurringDates.map((date, index) => {\n          const startTime = date.toTimeString().slice(0, 5);\n          const durationMs = new Date(`1970/01/01 ${selectedTask.endTime}`).getTime() - new Date(`1970/01/01 ${selectedTask.startTime}`).getTime();\n          const endTime = new Date(date.getTime() + durationMs).toTimeString().slice(0, 5);\n          return {\n            ...selectedTask,\n            taskId: `${baseTaskId}-${index}`,\n            date: getLocalDateString(date),\n            startTime,\n            endTime,\n            metadata: {\n              ...selectedTask.metadata,\n              lastUpdated: new Date().toISOString(),\n              recurringGroupId: baseTaskId\n            }\n          };\n        });\n\n        // Remove all existing instances of this recurring event\n        const updatedEvents = events.filter(event => !event.taskId.startsWith(baseTaskId));\n\n        // Add all new recurring instances\n        updatedEvents.push(...tasksToUpdate);\n\n        // Save to localStorage\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\n\n        // Update state\n        setEvents(updatedEvents);\n        setLastAction({\n          type: 'edit',\n          tasks: tasksToUpdate,\n          previousEvents: [...events]\n        });\n      } else {\n        var _selectedTask$descrip;\n        // Single task update\n        const updatedTask = {\n          ...selectedTask,\n          title: selectedTask.title.trim(),\n          description: ((_selectedTask$descrip = selectedTask.description) === null || _selectedTask$descrip === void 0 ? void 0 : _selectedTask$descrip.trim()) || '',\n          metadata: {\n            ...selectedTask.metadata,\n            lastUpdated: new Date().toISOString()\n          }\n        };\n\n        // Update the single task in events array\n        const updatedEvents = events.map(event => event.taskId === selectedTask.taskId ? updatedTask : event);\n\n        // Save to localStorage\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\n\n        // Update state\n        setEvents(updatedEvents);\n        setLastAction({\n          type: 'edit',\n          tasks: [updatedTask],\n          previousEvents: [...events]\n        });\n      }\n      setShowUndo(true);\n      setTimeout(() => setShowUndo(false), 5000);\n      setEditModalOpen(false);\n      setSelectedTask(null);\n      setErrors({});\n    } catch (error) {\n      console.error('Error saving edit:', error);\n      setErrorMessage('Failed to save changes. Please try again.');\n    }\n  };\n  const handleUndo = () => {\n    if (!lastAction) return;\n    try {\n      let updatedEvents;\n      if (lastAction.type === 'add') {\n        // Undo add by restoring previous events\n        updatedEvents = [...lastAction.previousEvents];\n      } else if (lastAction.type === 'delete') {\n        // Undo delete by adding back deleted tasks\n        updatedEvents = [...events, ...lastAction.tasks];\n      } else if (lastAction.type === 'edit') {\n        // Undo edit by restoring previous version of tasks\n        updatedEvents = events.map(event => {\n          const previousVersion = lastAction.previousEvents.find(e => e.taskId === event.taskId);\n          return previousVersion || event;\n        });\n      }\n\n      // Save to localStorage\n      localStorage.setItem('tasks', JSON.stringify(updatedEvents));\n      setEvents(updatedEvents);\n      setShowUndo(false);\n      setLastAction(null);\n    } catch (error) {\n      console.error('Error undoing action:', error);\n      setErrorMessage('Failed to undo last action. Please try again.');\n    }\n  };\n  const handleUndoDelete = () => {\n    const lastDeletedTask = deletedTasks[deletedTasks.length - 1];\n    if (lastDeletedTask) {\n      setEvents(prevEvents => [...prevEvents, lastDeletedTask]);\n      setDeletedTasks(prev => prev.filter(task => task.taskId !== lastDeletedTask.taskId));\n      setShowUndoNotification(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"day-details\",\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-banner\",\n      role: \"alert\",\n      children: [errorMessage, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setErrorMessage(''),\n        \"aria-label\": \"Dismiss error\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 767,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 9\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      role: \"status\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 9\n    }, this), showUndo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"undo-notification\",\n      role: \"alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"undo-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"undo-message\",\n          children: (lastAction === null || lastAction === void 0 ? void 0 : lastAction.type) === 'delete' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Task \\\"\", lastAction.tasks[0].title, \"\\\" deleted\"]\n          }, void 0, true) : (lastAction === null || lastAction === void 0 ? void 0 : lastAction.type) === 'edit' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Task \\\"\", lastAction.tasks[0].title, \"\\\" edited\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Task \\\"\", lastAction.tasks[0].title, \"\\\" added\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"undo-button\",\n          onClick: handleUndo,\n          children: \"Undo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"undo-timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 794,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 779,\n      columnNumber: 9\n    }, this), showUndoNotification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"undo-notification\",\n      role: \"alert\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Task deleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUndoDelete,\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Details for \", selectedDate.toLocaleDateString('en-US', {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric'\n      }), \", 2025\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-navigation\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousDay,\n        children: \"Previous Day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleToday,\n        children: \"Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextDay,\n        children: \"Next Day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedDate.getFullYear(),\n          onChange: e => handleDateChange(parseInt(e.target.value), selectedDate.getMonth(), selectedDate.getDate()),\n          children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedDate.getMonth(),\n          onChange: e => handleDateChange(selectedDate.getFullYear(), parseInt(e.target.value), selectedDate.getDate()),\n          children: months.map((month, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedDate.getDate(),\n          onChange: e => handleDateChange(selectedDate.getFullYear(), selectedDate.getMonth(), parseInt(e.target.value)),\n          children: Array.from({\n            length: new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate()\n          }, (_, i) => i + 1).map(day => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: day,\n            children: day\n          }, day, false, {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timeline-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Today's Timeline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 837,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timeline\",\n          children: dayTasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `timeline-item ${task.completed ? 'completed' : ''}`,\n            style: {\n              borderLeft: `5px solid ${getPriorityColor(task.priority)}`\n            },\n            onClick: () => toggleTask(task.taskId),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-title\",\n                children: [task.title, task.recurring && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"recurring-badge\",\n                  children: \"\\uD83D\\uDD04\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 849,\n                  columnNumber: 40\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 847,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-time\",\n                children: [formatTime12Hour(task.startTime), \" - \", formatTime12Hour(task.endTime)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-category\",\n                children: task.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 854,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-priority\",\n                children: [\"Priority: \", task.priority]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 19\n              }, this), task.description && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-description\",\n                children: task.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 861,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-button\",\n                onClick: e => {\n                  e.stopPropagation();\n                  handleEditTask(task);\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: e => {\n                  e.stopPropagation();\n                  handleDeleteTask(task);\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 17\n            }, this)]\n          }, task.taskId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Add a New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 881,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"schedule-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-input-complex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Task Category:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 885,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: newTask.category,\n                onChange: e => handleInputChange('category', e.target.value),\n                children: categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: cat,\n                  children: cat\n                }, cat, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 888,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 884,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"task-title\",\n                children: \"Task Title:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 893,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"task-title\",\n                type: \"text\",\n                value: newTask.title,\n                onChange: e => handleInputChange('title', e.target.value),\n                placeholder: \"Enter task title\",\n                \"aria-invalid\": errors.title ? 'true' : 'false',\n                \"aria-describedby\": errors.title ? 'title-error' : undefined\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 894,\n                columnNumber: 17\n              }, this), errors.title && /*#__PURE__*/_jsxDEV(\"span\", {\n                id: \"title-error\",\n                className: \"error-message\",\n                children: errors.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 903,\n                columnNumber: 34\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 892,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Task Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 906,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: newTask.description,\n                onChange: e => handleInputChange('description', e.target.value),\n                placeholder: \"Enter Task Description...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 905,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"start-time\",\n                children: \"Starting Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 915,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"start-time\",\n                type: \"time\",\n                value: newTask.startTime,\n                onChange: e => handleInputChange('startTime', e.target.value),\n                \"aria-invalid\": errors.startTime ? 'true' : 'false',\n                \"aria-describedby\": errors.startTime ? 'start-time-error' : undefined\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 916,\n                columnNumber: 17\n              }, this), errors.startTime && /*#__PURE__*/_jsxDEV(\"span\", {\n                id: \"start-time-error\",\n                className: \"error-message\",\n                children: errors.startTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 924,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 914,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"end-time\",\n                children: \"Ending Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 927,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"end-time\",\n                type: \"time\",\n                value: newTask.endTime,\n                onChange: e => handleInputChange('endTime', e.target.value),\n                \"aria-invalid\": errors.endTime ? 'true' : 'false',\n                \"aria-describedby\": errors.endTime ? 'end-time-error' : undefined\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 928,\n                columnNumber: 17\n              }, this), errors.endTime && /*#__PURE__*/_jsxDEV(\"span\", {\n                id: \"end-time-error\",\n                className: \"error-message\",\n                children: errors.endTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 936,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 926,\n              columnNumber: 15\n            }, this), errors.overlap && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlap-warning-popup\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Schedule Conflict\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 940,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: errors.overlap\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 941,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"modal-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"save-btn\",\n                  onClick: () => {\n                    setErrors({});\n                    handleAddTask(true); // Pass true to indicate overlap is accepted\n                  },\n                  children: \"Proceed Anyway\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 943,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"cancel-btn\",\n                  onClick: () => setErrors({}),\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 949,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 942,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 939,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Priority:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: newTask.priority,\n                onChange: e => handleInputChange('priority', e.target.value),\n                children: priorities.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: p,\n                  children: [p, \" Priority\"]\n                }, p, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 959,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 955,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Recurring Task:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: newTask.recurring,\n                onChange: e => handleRecurringChange(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 965,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 963,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-row\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleAddTask(),\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 883,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 835,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecurringOptionsModal, {\n      isOpen: recurringModalOpen,\n      onClose: () => setRecurringModalOpen(false),\n      onSave: handleRecurringOptionsSave,\n      recurringOptions: recurringOptions,\n      setRecurringOptions: setRecurringOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 7\n    }, this), editModalOpen && selectedTask && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: \"Edit Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 991,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedTask.title,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              title: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Description:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1001,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: selectedTask.description,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              description: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1009,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: selectedTask.startTime,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              startTime: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1010,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"End Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: selectedTask.endTime,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              endTime: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Category:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1025,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedTask.category,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              category: e.target.value\n            }),\n            children: categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: cat,\n              children: cat\n            }, cat, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1031,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Priority:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1036,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedTask.priority,\n            onChange: e => setSelectedTask({\n              ...selectedTask,\n              priority: e.target.value\n            }),\n            children: priorities.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: p,\n              children: p\n            }, p, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Recurring:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1047,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedTask.recurring,\n            onChange: e => handleRecurringChange(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1048,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1046,\n          columnNumber: 13\n        }, this), errors.overlap && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlap-warning-popup\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Schedule Conflict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: errors.overlap\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-btn\",\n              onClick: () => {\n                setErrors({});\n                handleSaveEdit(true); // Pass true to indicate overlap is accepted\n              },\n              children: \"Proceed Anyway\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1059,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"cancel-btn\",\n              onClick: () => setErrors({}),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1058,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: () => handleSaveEdit(),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1072,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-btn\",\n            onClick: handleDeleteTask,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1073,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: () => setEditModalOpen(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1074,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1071,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 989,\n      columnNumber: 9\n    }, this), confirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: \"Confirm Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirm-message\",\n          children: confirmMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1085,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: () => handleConfirmAction('all'),\n            children: \"All Instances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1087,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-btn\",\n            onClick: () => handleConfirmAction('single'),\n            children: \"Just This One\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: () => handleConfirmAction('cancel'),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1089,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1086,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 9\n    }, this), deleteConfirmModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: \"Confirm Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1099,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confirm-message\",\n          children: [\"Are you sure you want to delete \\\"\", taskToDelete === null || taskToDelete === void 0 ? void 0 : taskToDelete.title, \"\\\"?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"warning-text\",\n            children: \"This action can be undone for the next 5 seconds.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-btn\",\n            onClick: confirmDelete,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-btn\",\n            onClick: () => {\n              setDeleteConfirmModalOpen(false);\n              setTaskToDelete(null);\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1107,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1097,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 763,\n    columnNumber: 5\n  }, this);\n}\n_s(DayDetails, \"Xx9Vat63T6a55911b1Rn+wCPh9k=\");\n_c = DayDetails;\nexport default DayDetails;\nvar _c;\n$RefreshReg$(_c, \"DayDetails\");","map":{"version":3,"names":["React","useMemo","useState","useEffect","RecurringOptionsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","getLocalDateString","date","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","generateRecurringDates","startDate","recurringOptions","dates","start","end","endDate","currentDate","isNaN","getTime","console","error","interval","Math","max","parseInt","frequency","push","setDate","validWeekDays","weekDays","map","filter","includes","getDay","oldMonth","setMonth","setFullYear","length","warn","DayDetails","selectedDate","setSelectedDate","events","setEvents","_s","newTask","setNewTask","title","description","startTime","endTime","category","priority","recurring","recurringModalOpen","setRecurringModalOpen","setRecurringOptions","editModalOpen","setEditModalOpen","selectedTask","setSelectedTask","confirmModalOpen","setConfirmModalOpen","confirmAction","setConfirmAction","confirmMessage","setConfirmMessage","pendingTask","setPendingTask","lastAction","setLastAction","showUndo","setShowUndo","errors","setErrors","deletedTasks","setDeletedTasks","showUndoNotification","setShowUndoNotification","isLoading","setIsLoading","errorMessage","setErrorMessage","deleteConfirmModalOpen","setDeleteConfirmModalOpen","taskToDelete","setTaskToDelete","categories","priorities","months","years","currentYear","Array","from","_","i","handleRecurringChange","checked","handleRecurringOptionsSave","options","validateTimeInputs","timeRegex","test","startHour","startMinute","split","Number","endHour","endMinute","startMinutes","endMinutes","checkForOverlappingEvents","taskId","newStartMinutes","newEndMinutes","targetDate","some","task","taskStartHour","taskStartMinute","taskEndHour","taskEndMinute","taskStartMinutes","taskEndMinutes","normalizedNewEnd","normalizedTaskEnd","overlaps","log","new","existing","handleAddTask","allowOverlap","_newTask$title","_newTask$recurringOpt","_newTask$description","trim","timeErrors","Object","keys","overlap","taskData","now","toString","metadata","createdBy","createdAt","toISOString","lastUpdated","tasksToAdd","recurringDates","index","toTimeString","slice","durationMs","recurringGroupId","updatedEvents","eventsJson","JSON","stringify","localStorage","setItem","e","name","type","tasks","previousEvents","prevEvents","setTimeout","handleUpdateTask","updatedTask","handleEditTask","handleDeleteTask","confirmDelete","handleDeleteRecurring","action","baseTaskId","event","_event$metadata","_event$metadata2","handleConfirmAction","startsWith","dayTasks","filteredTasks","sort","a","b","getPriorityColor","toggleTask","find","t","completed","handlePreviousDay","prevDate","handleNextDay","nextDate","handleToday","handleDateChange","newDate","handleInputChange","field","value","prev","formatTime12Hour","time","hours","minutes","period","adjustedHours","handleSaveEdit","_selectedTask$recurri","tasksToUpdate","_selectedTask$descrip","handleUndo","previousVersion","handleUndoDelete","lastDeletedTask","className","children","role","onClick","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleDateString","weekday","onChange","target","style","borderLeft","stopPropagation","cat","htmlFor","id","placeholder","undefined","p","isOpen","onClose","onSave","_c","$RefreshReg$"],"sources":["C:/Users/anne_/Documents/GitHub5/CISC490Calendar/src/components/DayDetails.js"],"sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\r\nimport RecurringOptionsModal from './RecurringOptionsModal';\r\n\r\nconst getLocalDateString = (date) => {\r\n  const d = new Date(date);\r\n  const year = d.getFullYear();\r\n  const month = String(d.getMonth() + 1).padStart(2, '0');\r\n  const day = String(d.getDate()).padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst generateRecurringDates = (startDate, recurringOptions) => {\r\n  const dates = [];\r\n  const start = new Date(startDate);\r\n  const end = new Date(recurringOptions.endDate);\r\n  let currentDate = new Date(start);\r\n\r\n  // Validate dates\r\n  if (isNaN(start.getTime()) || isNaN(end.getTime())) {\r\n    console.error('Invalid start or end date');\r\n    return dates;\r\n  }\r\n\r\n  // Ensure interval is valid\r\n  const interval = Math.max(1, parseInt(recurringOptions.interval) || 1);\r\n\r\n  while (currentDate <= end) {\r\n    if (recurringOptions.frequency === 'daily') {\r\n      dates.push(new Date(currentDate));\r\n      currentDate.setDate(currentDate.getDate() + interval);\r\n    } else if (recurringOptions.frequency === 'weekly') {\r\n      // Ensure weekDays is an array of valid day numbers (0-6)\r\n      const validWeekDays = recurringOptions.weekDays\r\n        .map(day => parseInt(day))\r\n        .filter(day => !isNaN(day) && day >= 0 && day <= 6);\r\n\r\n      if (validWeekDays.includes(currentDate.getDay())) {\r\n        dates.push(new Date(currentDate));\r\n      }\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n      \r\n      // If we've completed a week and have an interval > 1, skip ahead\r\n      if (currentDate.getDay() === 0 && interval > 1) {\r\n        currentDate.setDate(currentDate.getDate() + (interval - 1) * 7);\r\n      }\r\n    } else if (recurringOptions.frequency === 'monthly') {\r\n      dates.push(new Date(currentDate));\r\n      const oldMonth = currentDate.getMonth();\r\n      currentDate.setMonth(currentDate.getMonth() + interval);\r\n      \r\n      // Handle month skipping (e.g., Jan 31 to Feb 31 should go to Feb 28)\r\n      if (currentDate.getMonth() > (oldMonth + interval) % 12) {\r\n        currentDate.setDate(0); // Set to last day of previous month\r\n      }\r\n    } else if (recurringOptions.frequency === 'yearly') {\r\n      dates.push(new Date(currentDate));\r\n      currentDate.setFullYear(currentDate.getFullYear() + interval);\r\n    }\r\n\r\n    // Safety check to prevent infinite loops\r\n    if (dates.length > 1000) {\r\n      console.warn('Too many recurring dates generated, truncating to 1000');\r\n      break;\r\n    }\r\n  }\r\n\r\n  return dates;\r\n};\r\n\r\nfunction DayDetails({ selectedDate, setSelectedDate, events, setEvents }) {\r\n  const [newTask, setNewTask] = useState({\r\n    title: '',\r\n    description: '',\r\n    startTime: '',\r\n    endTime: '',\r\n    category: 'Work',\r\n    priority: 'Medium',\r\n    recurring: false,\r\n  });\r\n  const [recurringModalOpen, setRecurringModalOpen] = useState(false);\r\n  const [recurringOptions, setRecurringOptions] = useState({\r\n    frequency: 'daily',\r\n    weekDays: [],\r\n    endDate: '',\r\n    interval: 1\r\n  });\r\n  const [editModalOpen, setEditModalOpen] = useState(false);\r\n  const [selectedTask, setSelectedTask] = useState(null);\r\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false);\r\n  const [confirmAction, setConfirmAction] = useState(null);\r\n  const [confirmMessage, setConfirmMessage] = useState('');\r\n  const [pendingTask, setPendingTask] = useState(null);\r\n  const [lastAction, setLastAction] = useState(null);\r\n  const [showUndo, setShowUndo] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [deletedTasks, setDeletedTasks] = useState([]);\r\n  const [showUndoNotification, setShowUndoNotification] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [deleteConfirmModalOpen, setDeleteConfirmModalOpen] = useState(false);\r\n  const [taskToDelete, setTaskToDelete] = useState(null);\r\n\r\n  const categories = useMemo(() => ['Work', 'Personal', 'School'], []);\r\n  const priorities = ['Low', 'Medium', 'High', 'Critical'];\r\n\r\n  const months = useMemo(() => [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ], []);\r\n\r\n  const years = useMemo(() => {\r\n    const currentYear = new Date().getFullYear();\r\n    return Array.from({ length: 20 }, (_, i) => currentYear - 10 + i);\r\n  }, []);\r\n\r\n  const handleRecurringChange = (checked) => {\r\n    if (selectedTask) {\r\n      setSelectedTask({ \r\n        ...selectedTask, \r\n        recurring: checked,\r\n        recurringOptions: checked ? {\r\n          frequency: 'daily',\r\n          weekDays: [],\r\n          endDate: '',\r\n          interval: 1\r\n        } : null\r\n      });\r\n      if (checked) {\r\n        setRecurringModalOpen(true);\r\n      }\r\n    } else {\r\n      setNewTask({ \r\n        ...newTask, \r\n        recurring: checked,\r\n        recurringOptions: checked ? {\r\n          frequency: 'daily',\r\n          weekDays: [],\r\n          endDate: '',\r\n          interval: 1\r\n        } : null\r\n      });\r\n      if (checked) {\r\n        setRecurringModalOpen(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRecurringOptionsSave = (options) => {\r\n    if (selectedTask) {\r\n      setSelectedTask({ \r\n        ...selectedTask, \r\n        recurringOptions: options,\r\n        recurring: true\r\n      });\r\n    } else {\r\n      setNewTask({ \r\n        ...newTask, \r\n        recurringOptions: options,\r\n        recurring: true\r\n      });\r\n    }\r\n    setRecurringModalOpen(false);\r\n  };\r\n\r\n  const validateTimeInputs = (startTime, endTime) => {\r\n    const errors = {};\r\n    \r\n    // Check if times are provided\r\n    if (!startTime) {\r\n      errors.startTime = 'Start time is required';\r\n    }\r\n    if (!endTime) {\r\n      errors.endTime = 'End time is required';\r\n    }\r\n\r\n    // Validate time format\r\n    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n    if (startTime && !timeRegex.test(startTime)) {\r\n      errors.startTime = 'Invalid time format';\r\n    }\r\n    if (endTime && !timeRegex.test(endTime)) {\r\n      errors.endTime = 'Invalid time format';\r\n    }\r\n\r\n    if (startTime && endTime && timeRegex.test(startTime) && timeRegex.test(endTime)) {\r\n      const [startHour, startMinute] = startTime.split(':').map(Number);\r\n      const [endHour, endMinute] = endTime.split(':').map(Number);\r\n      const startMinutes = startHour * 60 + startMinute;\r\n      const endMinutes = endHour * 60 + endMinute;\r\n      \r\n      // Handle events spanning midnight\r\n      if (endMinutes <= startMinutes && endMinutes !== 0) {\r\n        errors.endTime = 'End time must be after start time';\r\n      }\r\n    }\r\n    return errors;\r\n  };\r\n\r\n  const checkForOverlappingEvents = (startTime, endTime, taskId = null, date = null) => {\r\n    if (!startTime || !endTime) return false;\r\n\r\n    const [startHour, startMinute] = startTime.split(':').map(Number);\r\n    const [endHour, endMinute] = endTime.split(':').map(Number);\r\n    const newStartMinutes = startHour * 60 + startMinute;\r\n    const newEndMinutes = endHour * 60 + endMinute;\r\n    const targetDate = date || getLocalDateString(selectedDate);\r\n    \r\n    return events.some(task => {\r\n      // Skip self when editing\r\n      if (taskId && task.taskId === taskId) return false;\r\n      \r\n      // Only check events on the same day\r\n      if (task.date !== targetDate) return false;\r\n\r\n      const [taskStartHour, taskStartMinute] = task.startTime.split(':').map(Number);\r\n      const [taskEndHour, taskEndMinute] = task.endTime.split(':').map(Number);\r\n      const taskStartMinutes = taskStartHour * 60 + taskStartMinute;\r\n      const taskEndMinutes = taskEndHour * 60 + taskEndMinute;\r\n\r\n      // Handle events spanning midnight\r\n      const normalizedNewEnd = newEndMinutes < newStartMinutes ? newEndMinutes + 1440 : newEndMinutes;\r\n      const normalizedTaskEnd = taskEndMinutes < taskStartMinutes ? taskEndMinutes + 1440 : taskEndMinutes;\r\n\r\n      // Check if events overlap\r\n      const overlaps = (\r\n        (newStartMinutes < normalizedTaskEnd && normalizedNewEnd > taskStartMinutes) ||\r\n        (newStartMinutes === taskStartMinutes && normalizedNewEnd === normalizedTaskEnd)\r\n      );\r\n\r\n      if (overlaps) {\r\n        console.log('Overlap detected:', {\r\n          new: { start: startTime, end: endTime },\r\n          existing: { start: task.startTime, end: task.endTime }\r\n        });\r\n      }\r\n\r\n      return overlaps;\r\n    });\r\n  };\r\n\r\n  const handleAddTask = async (allowOverlap = false) => {\r\n    try {\r\n      setIsLoading(true);\r\n      setErrorMessage('');\r\n      \r\n      // Validate required fields\r\n      if (!newTask.title?.trim()) {\r\n        setErrors({ title: 'Title is required' });\r\n        return;\r\n      }\r\n\r\n      const timeErrors = validateTimeInputs(newTask.startTime, newTask.endTime);\r\n      if (Object.keys(timeErrors).length > 0) {\r\n        setErrors(timeErrors);\r\n        return;\r\n      }\r\n\r\n      // Only check for overlaps if allowOverlap is false\r\n      if (!allowOverlap && checkForOverlappingEvents(newTask.startTime, newTask.endTime)) {\r\n        setErrors({ overlap: 'This event overlaps with an existing event' });\r\n        return;\r\n      }\r\n\r\n      // Validate recurring options if task is recurring\r\n      if (newTask.recurring && (!newTask.recurringOptions?.endDate || \r\n          (newTask.recurringOptions.frequency === 'weekly' && \r\n           (!newTask.recurringOptions.weekDays || newTask.recurringOptions.weekDays.length === 0)))) {\r\n        setErrors({ recurring: 'Please complete recurring event settings' });\r\n        return;\r\n      }\r\n\r\n      setErrors({});\r\n      const taskData = {\r\n        taskId: Date.now().toString(),\r\n        title: newTask.title.trim(),\r\n        description: newTask.description?.trim() || '',\r\n        startTime: newTask.startTime,\r\n        endTime: newTask.endTime,\r\n        category: newTask.category || 'Work',\r\n        priority: newTask.priority || 'Medium',\r\n        recurring: newTask.recurring,\r\n        recurringOptions: newTask.recurring ? {\r\n          ...newTask.recurringOptions,\r\n          interval: Math.max(1, parseInt(newTask.recurringOptions.interval) || 1)\r\n        } : null,\r\n        metadata: { \r\n          createdBy: 'CurrentUser', \r\n          createdAt: new Date().toISOString(),\r\n          lastUpdated: new Date().toISOString() \r\n        },\r\n        date: getLocalDateString(selectedDate),\r\n      };\r\n\r\n      let tasksToAdd = [taskData];\r\n\r\n      if (taskData.recurring && taskData.recurringOptions) {\r\n        try {\r\n          const recurringDates = generateRecurringDates(\r\n            new Date(`${taskData.date}T${taskData.startTime}`),\r\n            taskData.recurringOptions\r\n          );\r\n\r\n          if (recurringDates.length === 0) {\r\n            setErrors({ recurring: 'No valid recurring dates were generated' });\r\n            return;\r\n          }\r\n\r\n          tasksToAdd = recurringDates.map((date, index) => {\r\n            const startTime = date.toTimeString().slice(0, 5);\r\n            const durationMs = new Date(`1970/01/01 ${taskData.endTime}`).getTime() - \r\n                             new Date(`1970/01/01 ${taskData.startTime}`).getTime();\r\n            const endTime = new Date(date.getTime() + durationMs).toTimeString().slice(0, 5);\r\n\r\n            return {\r\n              ...taskData,\r\n              taskId: `${taskData.taskId}-${index}`,\r\n              date: getLocalDateString(date),\r\n              startTime,\r\n              endTime,\r\n              metadata: {\r\n                ...taskData.metadata,\r\n                recurringGroupId: taskData.taskId\r\n              }\r\n            };\r\n          });\r\n        } catch (error) {\r\n          console.error('Error generating recurring dates:', error);\r\n          setErrors({ recurring: 'Error generating recurring dates' });\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Check storage limit before saving\r\n      try {\r\n        const updatedEvents = [...events, ...tasksToAdd];\r\n        const eventsJson = JSON.stringify(updatedEvents);\r\n        if (eventsJson.length > 5242880) { // 5MB limit\r\n          setErrorMessage('Storage limit exceeded. Please delete some tasks.');\r\n          return;\r\n        }\r\n        localStorage.setItem('tasks', eventsJson);\r\n      } catch (e) {\r\n        if (e.name === 'QuotaExceededError') {\r\n          setErrorMessage('Storage limit exceeded. Please delete some tasks.');\r\n          return;\r\n        }\r\n        throw e;\r\n      }\r\n\r\n      setLastAction({\r\n        type: 'add',\r\n        tasks: tasksToAdd,\r\n        previousEvents: [...events]\r\n      });\r\n      setEvents(prevEvents => [...prevEvents, ...tasksToAdd]);\r\n      setShowUndo(true);\r\n      setTimeout(() => setShowUndo(false), 5000);\r\n\r\n      // Reset form\r\n      setNewTask({\r\n        title: '',\r\n        description: '',\r\n        startTime: '',\r\n        endTime: '',\r\n        category: 'Work',\r\n        priority: 'Medium',\r\n        recurring: false,\r\n      });\r\n      setRecurringOptions({\r\n        frequency: 'daily',\r\n        weekDays: [],\r\n        endDate: '',\r\n        interval: 1\r\n      });\r\n    } catch (error) {\r\n      console.error('Error adding task:', error);\r\n      setErrorMessage('An error occurred while adding the task. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateTask = (taskId, updatedTask) => {\r\n    setEvents(prevEvents =>\r\n      prevEvents.map(task =>\r\n        task.taskId === taskId ? { ...task, ...updatedTask, metadata: { ...task.metadata, lastUpdated: new Date().toISOString() } } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleEditTask = (task) => {\r\n    const timeErrors = validateTimeInputs(task.startTime, task.endTime);\r\n    if (Object.keys(timeErrors).length > 0) {\r\n      setErrors(timeErrors);\r\n      return;\r\n    }\r\n\r\n    if (checkForOverlappingEvents(task.startTime, task.endTime, task.taskId, task.date)) {\r\n      setErrors({ overlap: 'This event overlaps with an existing event' });\r\n      return;\r\n    }\r\n\r\n    setErrors({});\r\n    if (task.recurring) {\r\n      setConfirmMessage('This is a recurring event. Would you like to edit all instances or just this one?');\r\n      setConfirmAction('edit');\r\n      setPendingTask(task);\r\n      setConfirmModalOpen(true);\r\n    } else {\r\n      setSelectedTask(task);\r\n      setEditModalOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTask = (task) => {\r\n    if (!task) return;\r\n    setTaskToDelete(task);\r\n    setDeleteConfirmModalOpen(true);\r\n  };\r\n\r\n  const confirmDelete = () => {\r\n    if (!taskToDelete) return;\r\n\r\n    if (taskToDelete.recurring) {\r\n      setConfirmMessage('This is a recurring event. Would you like to delete all instances or just this one?');\r\n      setConfirmAction('delete');\r\n      setPendingTask(taskToDelete);\r\n      setConfirmModalOpen(true);\r\n    } else {\r\n      const updatedEvents = events.filter(e => e.taskId !== taskToDelete.taskId);\r\n      \r\n      try {\r\n        // Save to localStorage before updating state\r\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\r\n        \r\n        // Store the action for undo\r\n        setLastAction({\r\n          type: 'delete',\r\n          tasks: [taskToDelete],\r\n          previousEvents: [...events]\r\n        });\r\n        \r\n        setEvents(updatedEvents);\r\n        setShowUndo(true);\r\n        setTimeout(() => setShowUndo(false), 5000);\r\n      } catch (error) {\r\n        console.error('Error deleting task:', error);\r\n        setErrorMessage('Failed to delete task. Please try again.');\r\n      }\r\n    }\r\n    setDeleteConfirmModalOpen(false);\r\n    setTaskToDelete(null);\r\n  };\r\n\r\n  const handleDeleteRecurring = (action) => {\r\n    if (!pendingTask) return;\r\n\r\n    try {\r\n      let updatedEvents;\r\n      let deletedTasks;\r\n\r\n      if (action === 'all') {\r\n        // For recurring events, match the base taskId (before the hyphen)\r\n        const baseTaskId = pendingTask.taskId.split('-')[0];\r\n        deletedTasks = events.filter(event => \r\n          event.taskId === pendingTask.taskId || \r\n          (event.metadata?.recurringGroupId === baseTaskId)\r\n        );\r\n        updatedEvents = events.filter(event => \r\n          event.taskId !== pendingTask.taskId && \r\n          event.metadata?.recurringGroupId !== baseTaskId\r\n        );\r\n      } else {\r\n        // Delete only the selected instance\r\n        deletedTasks = [pendingTask];\r\n        updatedEvents = events.filter(event => event.taskId !== pendingTask.taskId);\r\n      }\r\n\r\n      // Save to localStorage before updating state\r\n      localStorage.setItem('tasks', JSON.stringify(updatedEvents));\r\n\r\n      // Store the action for undo\r\n      setLastAction({\r\n        type: 'delete',\r\n        tasks: deletedTasks,\r\n        previousEvents: [...events]\r\n      });\r\n\r\n      setEvents(updatedEvents);\r\n      setShowUndo(true);\r\n      setTimeout(() => setShowUndo(false), 5000);\r\n    } catch (error) {\r\n      console.error('Error deleting recurring task:', error);\r\n      setErrorMessage('Failed to delete recurring task. Please try again.');\r\n    } finally {\r\n      setConfirmModalOpen(false);\r\n      setPendingTask(null);\r\n    }\r\n  };\r\n\r\n  const handleConfirmAction = (action) => {\r\n    if (action === 'cancel') {\r\n      setConfirmModalOpen(false);\r\n      setPendingTask(null);\r\n      return;\r\n    }\r\n\r\n    if (confirmAction === 'edit') {\r\n      if (pendingTask) {\r\n        if (action === 'all') {\r\n          setSelectedTask(pendingTask);\r\n          setEditModalOpen(true);\r\n        } else if (action === 'single') {\r\n          setSelectedTask(pendingTask);\r\n          setEditModalOpen(true);\r\n        }\r\n      }\r\n    } else if (confirmAction === 'delete') {\r\n      if (pendingTask) {\r\n        if (action === 'all' && pendingTask.recurringOptions) {\r\n          // Delete all instances of the recurring event by matching the base taskId\r\n          const baseTaskId = pendingTask.taskId.split('-')[0];\r\n          setEvents(prevEvents => prevEvents.filter(task => !task.taskId.startsWith(baseTaskId)));\r\n        } else if (action === 'single') {\r\n          // Delete only this instance\r\n          setEvents(prevEvents => prevEvents.filter(task => task.taskId !== pendingTask.taskId));\r\n        }\r\n      }\r\n    }\r\n    setConfirmModalOpen(false);\r\n    setPendingTask(null);\r\n  };\r\n\r\n  const dayTasks = useMemo(() => {\r\n    const filteredTasks = events.filter(task => task.date === getLocalDateString(selectedDate))\r\n      .sort((a, b) => new Date(`1970/01/01 ${a.startTime}`) - new Date(`1970/01/01 ${b.startTime}`));\r\n    return filteredTasks;\r\n  }, [events, selectedDate]);\r\n\r\n  useEffect(() => {\r\n    console.log('DayDetails selectedDate:', selectedDate, 'Normalized:', getLocalDateString(selectedDate));\r\n    console.log('DayDetails events:', events);\r\n    console.log('DayDetails dayTasks:', dayTasks);\r\n  }, [selectedDate, events, dayTasks]);\r\n\r\n  const getPriorityColor = (priority) => {\r\n    switch (priority) {\r\n      case 'Low': return '#A8CCDC';\r\n      case 'Medium': return '#DDA853';\r\n      case 'High': return '#164046';\r\n      case 'Critical': return '#FF0000';\r\n      default: return '#FFFFFF';\r\n    }\r\n  };\r\n\r\n  const toggleTask = (taskId) => {\r\n    const task = events.find(t => t.taskId === taskId);\r\n    if (task) {\r\n      const updatedTask = { ...task, completed: !task.completed, metadata: { ...task.metadata, lastUpdated: new Date().toISOString() } };\r\n      handleUpdateTask(taskId, updatedTask);\r\n    }\r\n  };\r\n\r\n  const handlePreviousDay = () => {\r\n    const prevDate = new Date(selectedDate);\r\n    prevDate.setDate(prevDate.getDate() - 1);\r\n    setSelectedDate(prevDate);\r\n  };\r\n\r\n  const handleNextDay = () => {\r\n    const nextDate = new Date(selectedDate);\r\n    nextDate.setDate(nextDate.getDate() + 1);\r\n    setSelectedDate(nextDate);\r\n  };\r\n\r\n  const handleToday = () => {\r\n    setSelectedDate(new Date());\r\n  };\r\n\r\n  const handleDateChange = (year, month, day) => {\r\n    const newDate = new Date(year, month, day);\r\n    if (!isNaN(newDate.getTime())) {\r\n      setSelectedDate(newDate);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setNewTask(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const formatTime12Hour = (time) => {\r\n    const [hours, minutes] = time.split(':').map(Number);\r\n    const period = hours >= 12 ? 'PM' : 'AM';\r\n    const adjustedHours = hours % 12 || 12;\r\n    return `${adjustedHours}:${minutes.toString().padStart(2, '0')} ${period}`;\r\n  };\r\n\r\n  const handleSaveEdit = (allowOverlap = false) => {\r\n    if (!selectedTask) return;\r\n\r\n    const timeErrors = validateTimeInputs(selectedTask.startTime, selectedTask.endTime);\r\n    if (Object.keys(timeErrors).length > 0) {\r\n      setErrors(timeErrors);\r\n      return;\r\n    }\r\n\r\n    // Only check for overlaps if allowOverlap is false\r\n    if (!allowOverlap && checkForOverlappingEvents(selectedTask.startTime, selectedTask.endTime, selectedTask.taskId, selectedTask.date)) {\r\n      setErrors({ overlap: 'This event overlaps with an existing event' });\r\n      return;\r\n    }\r\n\r\n    if (!selectedTask.title.trim()) {\r\n      setErrors({ title: 'Title is required' });\r\n      return;\r\n    }\r\n\r\n    // Validate recurring options if task is recurring\r\n    if (selectedTask.recurring && (!selectedTask.recurringOptions?.endDate || \r\n        (selectedTask.recurringOptions.frequency === 'weekly' && \r\n         (!selectedTask.recurringOptions.weekDays || selectedTask.recurringOptions.weekDays.length === 0)))) {\r\n      setErrors({ recurring: 'Please complete recurring event settings' });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let tasksToUpdate = [];\r\n      const baseTaskId = selectedTask.taskId.split('-')[0];\r\n      \r\n      if (selectedTask.recurring && selectedTask.recurringOptions) {\r\n        // Generate new recurring dates\r\n        const recurringDates = generateRecurringDates(\r\n          new Date(`${selectedTask.date}T${selectedTask.startTime}`),\r\n          selectedTask.recurringOptions\r\n        );\r\n\r\n        if (recurringDates.length === 0) {\r\n          setErrors({ recurring: 'No valid recurring dates were generated' });\r\n          return;\r\n        }\r\n\r\n        // Create updated tasks for all recurring instances\r\n        tasksToUpdate = recurringDates.map((date, index) => {\r\n          const startTime = date.toTimeString().slice(0, 5);\r\n          const durationMs = new Date(`1970/01/01 ${selectedTask.endTime}`).getTime() - \r\n                           new Date(`1970/01/01 ${selectedTask.startTime}`).getTime();\r\n          const endTime = new Date(date.getTime() + durationMs).toTimeString().slice(0, 5);\r\n\r\n          return {\r\n            ...selectedTask,\r\n            taskId: `${baseTaskId}-${index}`,\r\n            date: getLocalDateString(date),\r\n            startTime,\r\n            endTime,\r\n            metadata: {\r\n              ...selectedTask.metadata,\r\n              lastUpdated: new Date().toISOString(),\r\n              recurringGroupId: baseTaskId\r\n            }\r\n          };\r\n        });\r\n\r\n        // Remove all existing instances of this recurring event\r\n        const updatedEvents = events.filter(event => \r\n          !event.taskId.startsWith(baseTaskId)\r\n        );\r\n\r\n        // Add all new recurring instances\r\n        updatedEvents.push(...tasksToUpdate);\r\n\r\n        // Save to localStorage\r\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\r\n        \r\n        // Update state\r\n        setEvents(updatedEvents);\r\n        setLastAction({\r\n          type: 'edit',\r\n          tasks: tasksToUpdate,\r\n          previousEvents: [...events]\r\n        });\r\n      } else {\r\n        // Single task update\r\n        const updatedTask = {\r\n          ...selectedTask,\r\n          title: selectedTask.title.trim(),\r\n          description: selectedTask.description?.trim() || '',\r\n          metadata: { \r\n            ...selectedTask.metadata, \r\n            lastUpdated: new Date().toISOString() \r\n          }\r\n        };\r\n\r\n        // Update the single task in events array\r\n        const updatedEvents = events.map(event => \r\n          event.taskId === selectedTask.taskId ? updatedTask : event\r\n        );\r\n\r\n        // Save to localStorage\r\n        localStorage.setItem('tasks', JSON.stringify(updatedEvents));\r\n        \r\n        // Update state\r\n        setEvents(updatedEvents);\r\n        setLastAction({\r\n          type: 'edit',\r\n          tasks: [updatedTask],\r\n          previousEvents: [...events]\r\n        });\r\n      }\r\n\r\n      setShowUndo(true);\r\n      setTimeout(() => setShowUndo(false), 5000);\r\n      setEditModalOpen(false);\r\n      setSelectedTask(null);\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('Error saving edit:', error);\r\n      setErrorMessage('Failed to save changes. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    if (!lastAction) return;\r\n\r\n    try {\r\n      let updatedEvents;\r\n      \r\n      if (lastAction.type === 'add') {\r\n        // Undo add by restoring previous events\r\n        updatedEvents = [...lastAction.previousEvents];\r\n      } else if (lastAction.type === 'delete') {\r\n        // Undo delete by adding back deleted tasks\r\n        updatedEvents = [...events, ...lastAction.tasks];\r\n      } else if (lastAction.type === 'edit') {\r\n        // Undo edit by restoring previous version of tasks\r\n        updatedEvents = events.map(event => {\r\n          const previousVersion = lastAction.previousEvents.find(e => e.taskId === event.taskId);\r\n          return previousVersion || event;\r\n        });\r\n      }\r\n\r\n      // Save to localStorage\r\n      localStorage.setItem('tasks', JSON.stringify(updatedEvents));\r\n      \r\n      setEvents(updatedEvents);\r\n      setShowUndo(false);\r\n      setLastAction(null);\r\n    } catch (error) {\r\n      console.error('Error undoing action:', error);\r\n      setErrorMessage('Failed to undo last action. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleUndoDelete = () => {\r\n    const lastDeletedTask = deletedTasks[deletedTasks.length - 1];\r\n    if (lastDeletedTask) {\r\n      setEvents(prevEvents => [...prevEvents, lastDeletedTask]);\r\n      setDeletedTasks(prev => prev.filter(task => task.taskId !== lastDeletedTask.taskId));\r\n      setShowUndoNotification(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"day-details\">\r\n      {errorMessage && (\r\n        <div className=\"error-banner\" role=\"alert\">\r\n          {errorMessage}\r\n          <button onClick={() => setErrorMessage('')} aria-label=\"Dismiss error\">\r\n            ×\r\n          </button>\r\n        </div>\r\n      )}\r\n      {isLoading && (\r\n        <div className=\"loading-overlay\" role=\"status\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      )}\r\n      {showUndo && (\r\n        <div className=\"undo-notification\" role=\"alert\">\r\n          <div className=\"undo-content\">\r\n            <span className=\"undo-message\">\r\n              {lastAction?.type === 'delete' ? (\r\n                <>Task \"{lastAction.tasks[0].title}\" deleted</>\r\n              ) : lastAction?.type === 'edit' ? (\r\n                <>Task \"{lastAction.tasks[0].title}\" edited</>\r\n              ) : (\r\n                <>Task \"{lastAction.tasks[0].title}\" added</>\r\n              )}\r\n            </span>\r\n            <button className=\"undo-button\" onClick={handleUndo}>\r\n              Undo\r\n            </button>\r\n          </div>\r\n          <div className=\"undo-timer\"></div>\r\n        </div>\r\n      )}\r\n      {showUndoNotification && (\r\n        <div className=\"undo-notification\" role=\"alert\">\r\n          <span>Task deleted</span>\r\n          <button onClick={handleUndoDelete}>Undo</button>\r\n        </div>\r\n      )}\r\n      <h2>Details for {selectedDate.toLocaleDateString('en-US', { weekday: 'long', month: 'long', day: 'numeric'})}, 2025</h2>\r\n      <div className=\"date-navigation\">\r\n        <button onClick={handlePreviousDay}>Previous Day</button>\r\n        <button onClick={handleToday}>Today</button>\r\n        <button onClick={handleNextDay}>Next Day</button>\r\n        <div className=\"date-selector\">\r\n          <select\r\n            value={selectedDate.getFullYear()}\r\n            onChange={(e) => handleDateChange(parseInt(e.target.value), selectedDate.getMonth(), selectedDate.getDate())}\r\n          >\r\n            {years.map(year => (\r\n              <option key={year} value={year}>{year}</option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            value={selectedDate.getMonth()}\r\n            onChange={(e) => handleDateChange(selectedDate.getFullYear(), parseInt(e.target.value), selectedDate.getDate())}\r\n          >\r\n            {months.map((month, index) => (\r\n              <option key={month} value={index}>{month}</option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            value={selectedDate.getDate()}\r\n            onChange={(e) => handleDateChange(selectedDate.getFullYear(), selectedDate.getMonth(), parseInt(e.target.value))}\r\n          >\r\n            {Array.from({ length: new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0).getDate() }, (_, i) => i + 1).map(day => (\r\n              <option key={day} value={day}>{day}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"details-content\">\r\n        <div className=\"timeline-section\">\r\n          <h3>Today's Timeline</h3>\r\n          <div className=\"timeline\">\r\n            {dayTasks.map((task) => (\r\n              <div \r\n                key={task.taskId} \r\n                className={`timeline-item ${task.completed ? 'completed' : ''}`}\r\n                style={{ borderLeft: `5px solid ${getPriorityColor(task.priority)}` }}\r\n                onClick={() => toggleTask(task.taskId)}\r\n              >\r\n                <div className=\"task-content\">\r\n                  <div className=\"task-title\">\r\n                    {task.title}\r\n                    {task.recurring && <span className=\"recurring-badge\">🔄</span>}\r\n                  </div>\r\n                  <div className=\"task-time\">\r\n                    {formatTime12Hour(task.startTime)} - {formatTime12Hour(task.endTime)}\r\n                  </div>\r\n                  <div className=\"task-category\">\r\n                    {task.category}\r\n                  </div>\r\n                  <div className=\"task-priority\">\r\n                    Priority: {task.priority}\r\n                  </div>\r\n                  {task.description && (\r\n                    <div className=\"task-description\">\r\n                      {task.description}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"task-actions\">\r\n                  <button className=\"edit-button\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleEditTask(task);\r\n                  }}>Edit</button>\r\n                  <button className=\"delete-button\" onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleDeleteTask(task);\r\n                  }}>Delete</button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"right-section\">\r\n          <h3>Add a New Task</h3>\r\n          <div className=\"schedule-section\">\r\n            <div className=\"task-input-complex\">\r\n              <div className=\"input-row\">\r\n                <label>Task Category:</label>\r\n                <select value={newTask.category} onChange={(e) => handleInputChange('category', e.target.value)}>\r\n                  {categories.map(cat => (\r\n                    <option key={cat} value={cat}>{cat}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <label htmlFor=\"task-title\">Task Title:</label>\r\n                <input\r\n                  id=\"task-title\"\r\n                  type=\"text\"\r\n                  value={newTask.title}\r\n                  onChange={(e) => handleInputChange('title', e.target.value)}\r\n                  placeholder=\"Enter task title\"\r\n                  aria-invalid={errors.title ? 'true' : 'false'}\r\n                  aria-describedby={errors.title ? 'title-error' : undefined}\r\n                />\r\n                {errors.title && <span id=\"title-error\" className=\"error-message\">{errors.title}</span>}\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <label>Task Description:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newTask.description}\r\n                  onChange={(e) => handleInputChange('description', e.target.value)}\r\n                  placeholder=\"Enter Task Description...\"\r\n                />\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <label htmlFor=\"start-time\">Starting Time:</label>\r\n                <input\r\n                  id=\"start-time\"\r\n                  type=\"time\"\r\n                  value={newTask.startTime}\r\n                  onChange={(e) => handleInputChange('startTime', e.target.value)}\r\n                  aria-invalid={errors.startTime ? 'true' : 'false'}\r\n                  aria-describedby={errors.startTime ? 'start-time-error' : undefined}\r\n                />\r\n                {errors.startTime && <span id=\"start-time-error\" className=\"error-message\">{errors.startTime}</span>}\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <label htmlFor=\"end-time\">Ending Time:</label>\r\n                <input\r\n                  id=\"end-time\"\r\n                  type=\"time\"\r\n                  value={newTask.endTime}\r\n                  onChange={(e) => handleInputChange('endTime', e.target.value)}\r\n                  aria-invalid={errors.endTime ? 'true' : 'false'}\r\n                  aria-describedby={errors.endTime ? 'end-time-error' : undefined}\r\n                />\r\n                {errors.endTime && <span id=\"end-time-error\" className=\"error-message\">{errors.endTime}</span>}\r\n              </div>\r\n              {errors.overlap && (\r\n                <div className=\"overlap-warning-popup\">\r\n                  <h3>Schedule Conflict</h3>\r\n                  <p>{errors.overlap}</p>\r\n                  <div className=\"modal-buttons\">\r\n                    <button className=\"save-btn\" onClick={() => {\r\n                      setErrors({});\r\n                      handleAddTask(true); // Pass true to indicate overlap is accepted\r\n                    }}>\r\n                      Proceed Anyway\r\n                    </button>\r\n                    <button className=\"cancel-btn\" onClick={() => setErrors({})}>\r\n                      Cancel\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              <div className=\"input-row\">\r\n                <label>Priority:</label>\r\n                <select value={newTask.priority} onChange={(e) => handleInputChange('priority', e.target.value)}>\r\n                  {priorities.map(p => (\r\n                    <option key={p} value={p}>{p} Priority</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <label>Recurring Task:</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={newTask.recurring}\r\n                  onChange={(e) => handleRecurringChange(e.target.checked)}\r\n                />\r\n              </div>\r\n              <div className=\"input-row\">\r\n                <button onClick={() => handleAddTask()}>Add</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <RecurringOptionsModal\r\n        isOpen={recurringModalOpen}\r\n        onClose={() => setRecurringModalOpen(false)}\r\n        onSave={handleRecurringOptionsSave}\r\n        recurringOptions={recurringOptions}\r\n        setRecurringOptions={setRecurringOptions}\r\n      />\r\n\r\n      {/* Edit Task Modal */}\r\n      {editModalOpen && selectedTask && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">Edit Task</div>\r\n            <div className=\"input-row\">\r\n              <label>Title:</label>\r\n              <input\r\n                type=\"text\"\r\n                value={selectedTask.title}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, title: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>Description:</label>\r\n              <input\r\n                type=\"text\"\r\n                value={selectedTask.description}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, description: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>Start Time:</label>\r\n              <input\r\n                type=\"time\"\r\n                value={selectedTask.startTime}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, startTime: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>End Time:</label>\r\n              <input\r\n                type=\"time\"\r\n                value={selectedTask.endTime}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, endTime: e.target.value })}\r\n              />\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>Category:</label>\r\n              <select\r\n                value={selectedTask.category}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, category: e.target.value })}\r\n              >\r\n                {categories.map(cat => (\r\n                  <option key={cat} value={cat}>{cat}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>Priority:</label>\r\n              <select\r\n                value={selectedTask.priority}\r\n                onChange={(e) => setSelectedTask({ ...selectedTask, priority: e.target.value })}\r\n              >\r\n                {priorities.map(p => (\r\n                  <option key={p} value={p}>{p}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"input-row\">\r\n              <label>Recurring:</label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedTask.recurring}\r\n                onChange={(e) => handleRecurringChange(e.target.checked)}\r\n              />\r\n            </div>\r\n            {errors.overlap && (\r\n              <div className=\"overlap-warning-popup\">\r\n                <h3>Schedule Conflict</h3>\r\n                <p>{errors.overlap}</p>\r\n                <div className=\"modal-buttons\">\r\n                  <button className=\"save-btn\" onClick={() => {\r\n                    setErrors({});\r\n                    handleSaveEdit(true); // Pass true to indicate overlap is accepted\r\n                  }}>\r\n                    Proceed Anyway\r\n                  </button>\r\n                  <button className=\"cancel-btn\" onClick={() => setErrors({})}>\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            <div className=\"modal-buttons\">\r\n              <button className=\"save-btn\" onClick={() => handleSaveEdit()}>Save</button>\r\n              <button className=\"delete-btn\" onClick={handleDeleteTask}>Delete</button>\r\n              <button className=\"cancel-btn\" onClick={() => setEditModalOpen(false)}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Confirmation Modal */}\r\n      {confirmModalOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">Confirm Action</div>\r\n            <div className=\"confirm-message\">{confirmMessage}</div>\r\n            <div className=\"modal-buttons\">\r\n              <button className=\"save-btn\" onClick={() => handleConfirmAction('all')}>All Instances</button>\r\n              <button className=\"save-btn\" onClick={() => handleConfirmAction('single')}>Just This One</button>\r\n              <button className=\"cancel-btn\" onClick={() => handleConfirmAction('cancel')}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      {deleteConfirmModalOpen && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">Confirm Delete</div>\r\n            <div className=\"confirm-message\">\r\n              Are you sure you want to delete \"{taskToDelete?.title}\"?\r\n              <br />\r\n              <span className=\"warning-text\">This action can be undone for the next 5 seconds.</span>\r\n            </div>\r\n            <div className=\"modal-buttons\">\r\n              <button className=\"delete-btn\" onClick={confirmDelete}>Delete</button>\r\n              <button className=\"cancel-btn\" onClick={() => {\r\n                setDeleteConfirmModalOpen(false);\r\n                setTaskToDelete(null);\r\n              }}>Cancel</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DayDetails;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}