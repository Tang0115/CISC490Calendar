{"ast":null,"code":"var _jsxFileName = \"/home/tang0115/cisc490/calendar/CISC-490-Calendar/src/components/WeekView.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport RecurringOptionsModal from './RecurringOptionsModal';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay } from 'date-fns';\n\n// Utility to get local YYYY-MM-DD\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLocalDateString = date => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Utility to generate recurring event dates\nconst generateRecurringDates = (startDate, recurringOptions) => {\n  const dates = [];\n  const start = new Date(startDate);\n  const end = new Date(recurringOptions.endDate);\n  let currentDate = new Date(start);\n  while (currentDate <= end) {\n    if (recurringOptions.frequency === 'daily') {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + recurringOptions.interval);\n    } else if (recurringOptions.frequency === 'weekly') {\n      if (recurringOptions.weekDays.includes(currentDate.getDay())) {\n        dates.push(new Date(currentDate));\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n      if (currentDate.getDay() === 0) {\n        currentDate.setDate(currentDate.getDate() + (recurringOptions.interval - 1) * 7);\n      }\n    } else if (recurringOptions.frequency === 'monthly') {\n      dates.push(new Date(currentDate));\n      currentDate.setMonth(currentDate.getMonth() + recurringOptions.interval);\n    } else if (recurringOptions.frequency === 'yearly') {\n      dates.push(new Date(currentDate));\n      currentDate.setFullYear(currentDate.getFullYear() + recurringOptions.interval);\n    }\n  }\n  return dates;\n};\nfunction WeekView({\n  selectedDate,\n  setSelectedDate,\n  events,\n  setEvents\n}) {\n  _s();\n  const calendarRef = useRef(null);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [recurringModalOpen, setRecurringModalOpen] = useState(false);\n  const [recurringOptions, setRecurringOptions] = useState({\n    frequency: 'daily',\n    weekDays: [],\n    endDate: '',\n    interval: 1\n  });\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    category: 'Work',\n    priority: 'Medium',\n    recurring: false,\n    date: getLocalDateString(selectedDate)\n  });\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false);\n  const [confirmAction, setConfirmAction] = useState(null);\n  const [confirmMessage, setConfirmMessage] = useState('');\n  const [pendingEvent, setPendingEvent] = useState(null);\n  useEffect(() => {\n    if (calendarRef.current) {\n      const calendarApi = calendarRef.current.getApi();\n      calendarApi.gotoDate(selectedDate);\n      console.log('Calendar initialized with selectedDate:', selectedDate, 'Local date:', getLocalDateString(selectedDate));\n    }\n  }, [selectedDate]);\n  useEffect(() => {\n    console.log('WeekView events:', events);\n  }, [events]);\n  const handleDateClick = info => {\n    const startTime = info.date.toTimeString().slice(0, 5); // e.g., \"13:00\"\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const endHours = (hours + 1) % 24;\n    const endTime = `${endHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    const clickedDate = getLocalDateString(info.date);\n    console.log('handleDateClick - Clicked date:', info.date, 'Normalized:', clickedDate);\n    setNewEvent({\n      ...newEvent,\n      date: clickedDate,\n      startTime,\n      endTime\n    });\n    setCreateModalOpen(true);\n  };\n  const handleEventClick = info => {\n    const event = events.find(e => e.taskId === info.event.id.toString());\n    if (event) {\n      console.log('Clicked event:', event);\n      setSelectedEvent(event);\n      setEditModalOpen(true);\n    } else {\n      console.error(`Event with ID ${info.event.id} not found in events array`, events);\n    }\n  };\n  const handleEventDrop = info => {\n    const updatedEvent = {\n      ...info.event.extendedProps,\n      taskId: info.event.id.toString(),\n      title: info.event.title,\n      date: getLocalDateString(info.event.start),\n      startTime: info.event.start.toTimeString().slice(0, 5),\n      endTime: info.event.end ? info.event.end.toTimeString().slice(0, 5) : info.event.start.toTimeString().slice(0, 5),\n      metadata: info.event.extendedProps.metadata || {\n        createdBy: 'CurrentUser',\n        lastUpdated: new Date().toISOString()\n      }\n    };\n    console.log('Event dropped:', updatedEvent);\n    setEvents(prevEvents => prevEvents.map(ev => ev.taskId === updatedEvent.taskId ? updatedEvent : ev));\n  };\n  const handleRecurringChange = checked => {\n    if (selectedEvent) {\n      setSelectedEvent({\n        ...selectedEvent,\n        recurring: checked\n      });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    } else {\n      setNewEvent({\n        ...newEvent,\n        recurring: checked\n      });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    }\n  };\n  const handleRecurringOptionsSave = options => {\n    if (selectedEvent) {\n      setSelectedEvent({\n        ...selectedEvent,\n        recurringOptions: options\n      });\n    } else {\n      setNewEvent({\n        ...newEvent,\n        recurringOptions: options\n      });\n    }\n  };\n  const handleCreateEvent = () => {\n    if (newEvent.title.trim() && newEvent.startTime && newEvent.endTime) {\n      const eventData = {\n        taskId: Date.now().toString(),\n        title: newEvent.title,\n        description: newEvent.description || '',\n        startTime: newEvent.startTime,\n        endTime: newEvent.endTime,\n        category: newEvent.category,\n        priority: newEvent.priority || 'Medium',\n        recurring: newEvent.recurring,\n        recurringOptions: newEvent.recurring ? newEvent.recurringOptions : null,\n        date: newEvent.date,\n        metadata: {\n          createdBy: 'CurrentUser',\n          lastUpdated: new Date().toISOString()\n        }\n      };\n      let eventsToAdd = [eventData];\n      if (eventData.recurring && eventData.recurringOptions) {\n        const recurringDates = generateRecurringDates(new Date(`${eventData.date}T${eventData.startTime}`), eventData.recurringOptions);\n        eventsToAdd = recurringDates.map((date, index) => ({\n          ...eventData,\n          taskId: `${eventData.taskId}-${index}`,\n          date: getLocalDateString(date),\n          startTime: date.toTimeString().slice(0, 5),\n          endTime: new Date(date.getTime() + (new Date(`1970/01/01 ${eventData.endTime}`).getTime() - new Date(`1970/01/01 ${eventData.startTime}`).getTime())).toTimeString().slice(0, 5)\n        }));\n      }\n      setEvents(prevEvents => [...prevEvents, ...eventsToAdd]);\n      setCreateModalOpen(false);\n      setNewEvent({\n        title: '',\n        description: '',\n        startTime: '',\n        endTime: '',\n        category: 'Work',\n        priority: 'Medium',\n        recurring: false,\n        date: getLocalDateString(selectedDate)\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-view\",\n    children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n      ref: calendarRef,\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridWeek\",\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'timeGridWeek,timeGridDay'\n      },\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: true,\n      initialDate: selectedDate,\n      events: events.map(event => ({\n        id: event.taskId,\n        title: event.title,\n        start: `${event.date}T${event.startTime}`,\n        end: `${event.date}T${event.endTime}`,\n        className: `priority-${event.priority.toLowerCase()}`,\n        extendedProps: event\n      })),\n      dateClick: handleDateClick,\n      eventClick: handleEventClick,\n      eventDrop: handleEventDrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), recurringModalOpen && /*#__PURE__*/_jsxDEV(RecurringOptionsModal, {\n      isOpen: recurringModalOpen,\n      onClose: () => setRecurringModalOpen(false),\n      onSave: handleRecurringOptionsSave,\n      initialOptions: recurringOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n_s(WeekView, \"HjUM7ba14Ok+CchhMRsRFgyYcm0=\");\n_c = WeekView;\nexport default WeekView;\nvar _c;\n$RefreshReg$(_c, \"WeekView\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","RecurringOptionsModal","format","startOfMonth","endOfMonth","eachDayOfInterval","isSameMonth","isSameDay","jsxDEV","_jsxDEV","getLocalDateString","date","d","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","generateRecurringDates","startDate","recurringOptions","dates","start","end","endDate","currentDate","frequency","push","setDate","interval","weekDays","includes","getDay","setMonth","setFullYear","WeekView","selectedDate","setSelectedDate","events","setEvents","_s","calendarRef","createModalOpen","setCreateModalOpen","editModalOpen","setEditModalOpen","selectedEvent","setSelectedEvent","recurringModalOpen","setRecurringModalOpen","setRecurringOptions","newEvent","setNewEvent","title","description","startTime","endTime","category","priority","recurring","confirmModalOpen","setConfirmModalOpen","confirmAction","setConfirmAction","confirmMessage","setConfirmMessage","pendingEvent","setPendingEvent","current","calendarApi","getApi","gotoDate","console","log","handleDateClick","info","toTimeString","slice","hours","minutes","split","map","Number","endHours","toString","clickedDate","handleEventClick","event","find","e","taskId","id","error","handleEventDrop","updatedEvent","extendedProps","metadata","createdBy","lastUpdated","toISOString","prevEvents","ev","handleRecurringChange","checked","handleRecurringOptionsSave","options","handleCreateEvent","trim","eventData","now","eventsToAdd","recurringDates","index","getTime","className","children","ref","plugins","initialView","headerToolbar","left","center","right","editable","selectable","selectMirror","dayMaxEvents","weekends","initialDate","toLowerCase","dateClick","eventClick","eventDrop","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onClose","onSave","initialOptions","_c","$RefreshReg$"],"sources":["/home/tang0115/cisc490/calendar/CISC-490-Calendar/src/components/WeekView.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport RecurringOptionsModal from './RecurringOptionsModal';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay } from 'date-fns';\n\n// Utility to get local YYYY-MM-DD\nconst getLocalDateString = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0'); // Months are 0-based\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\n// Utility to generate recurring event dates\nconst generateRecurringDates = (startDate, recurringOptions) => {\n  const dates = [];\n  const start = new Date(startDate);\n  const end = new Date(recurringOptions.endDate);\n  let currentDate = new Date(start);\n\n  while (currentDate <= end) {\n    if (recurringOptions.frequency === 'daily') {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + recurringOptions.interval);\n    } else if (recurringOptions.frequency === 'weekly') {\n      if (recurringOptions.weekDays.includes(currentDate.getDay())) {\n        dates.push(new Date(currentDate));\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n      if (currentDate.getDay() === 0) {\n        currentDate.setDate(currentDate.getDate() + (recurringOptions.interval - 1) * 7);\n      }\n    } else if (recurringOptions.frequency === 'monthly') {\n      dates.push(new Date(currentDate));\n      currentDate.setMonth(currentDate.getMonth() + recurringOptions.interval);\n    } else if (recurringOptions.frequency === 'yearly') {\n      dates.push(new Date(currentDate));\n      currentDate.setFullYear(currentDate.getFullYear() + recurringOptions.interval);\n    }\n  }\n\n  return dates;\n};\n\nfunction WeekView({ selectedDate, setSelectedDate, events, setEvents }) {\n  const calendarRef = useRef(null);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [recurringModalOpen, setRecurringModalOpen] = useState(false);\n  const [recurringOptions, setRecurringOptions] = useState({\n    frequency: 'daily',\n    weekDays: [],\n    endDate: '',\n    interval: 1\n  });\n  const [newEvent, setNewEvent] = useState({\n    title: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    category: 'Work',\n    priority: 'Medium',\n    recurring: false,\n    date: getLocalDateString(selectedDate),\n  });\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false);\n  const [confirmAction, setConfirmAction] = useState(null);\n  const [confirmMessage, setConfirmMessage] = useState('');\n  const [pendingEvent, setPendingEvent] = useState(null);\n\n  useEffect(() => {\n    if (calendarRef.current) {\n      const calendarApi = calendarRef.current.getApi();\n      calendarApi.gotoDate(selectedDate);\n      console.log('Calendar initialized with selectedDate:', selectedDate, 'Local date:', getLocalDateString(selectedDate));\n    }\n  }, [selectedDate]);\n\n  useEffect(() => {\n    console.log('WeekView events:', events);\n  }, [events]);\n\n  const handleDateClick = (info) => {\n    const startTime = info.date.toTimeString().slice(0, 5); // e.g., \"13:00\"\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const endHours = (hours + 1) % 24;\n    const endTime = `${endHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    const clickedDate = getLocalDateString(info.date);\n    console.log('handleDateClick - Clicked date:', info.date, 'Normalized:', clickedDate);\n    setNewEvent({\n      ...newEvent,\n      date: clickedDate,\n      startTime,\n      endTime,\n    });\n    setCreateModalOpen(true);\n  };\n\n  const handleEventClick = (info) => {\n    const event = events.find(e => e.taskId === info.event.id.toString());\n    if (event) {\n      console.log('Clicked event:', event);\n      setSelectedEvent(event);\n      setEditModalOpen(true);\n    } else {\n      console.error(`Event with ID ${info.event.id} not found in events array`, events);\n    }\n  };\n\n  const handleEventDrop = (info) => {\n    const updatedEvent = {\n      ...info.event.extendedProps,\n      taskId: info.event.id.toString(),\n      title: info.event.title,\n      date: getLocalDateString(info.event.start),\n      startTime: info.event.start.toTimeString().slice(0, 5),\n      endTime: info.event.end ? info.event.end.toTimeString().slice(0, 5) : info.event.start.toTimeString().slice(0, 5),\n      metadata: info.event.extendedProps.metadata || { createdBy: 'CurrentUser', lastUpdated: new Date().toISOString() },\n    };\n    console.log('Event dropped:', updatedEvent);\n    setEvents(prevEvents =>\n      prevEvents.map(ev => (ev.taskId === updatedEvent.taskId ? updatedEvent : ev))\n    );\n  };\n\n  const handleRecurringChange = (checked) => {\n    if (selectedEvent) {\n      setSelectedEvent({ ...selectedEvent, recurring: checked });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    } else {\n      setNewEvent({ ...newEvent, recurring: checked });\n      if (checked) {\n        setRecurringModalOpen(true);\n      }\n    }\n  };\n\n  const handleRecurringOptionsSave = (options) => {\n    if (selectedEvent) {\n      setSelectedEvent({ ...selectedEvent, recurringOptions: options });\n    } else {\n      setNewEvent({ ...newEvent, recurringOptions: options });\n    }\n  };\n\n  const handleCreateEvent = () => {\n    if (newEvent.title.trim() && newEvent.startTime && newEvent.endTime) {\n      const eventData = {\n        taskId: Date.now().toString(),\n        title: newEvent.title,\n        description: newEvent.description || '',\n        startTime: newEvent.startTime,\n        endTime: newEvent.endTime,\n        category: newEvent.category,\n        priority: newEvent.priority || 'Medium',\n        recurring: newEvent.recurring,\n        recurringOptions: newEvent.recurring ? newEvent.recurringOptions : null,\n        date: newEvent.date,\n        metadata: { createdBy: 'CurrentUser', lastUpdated: new Date().toISOString() },\n      };\n\n      let eventsToAdd = [eventData];\n\n      if (eventData.recurring && eventData.recurringOptions) {\n        const recurringDates = generateRecurringDates(\n          new Date(`${eventData.date}T${eventData.startTime}`),\n          eventData.recurringOptions\n        );\n\n        eventsToAdd = recurringDates.map((date, index) => ({\n          ...eventData,\n          taskId: `${eventData.taskId}-${index}`,\n          date: getLocalDateString(date),\n          startTime: date.toTimeString().slice(0, 5),\n          endTime: new Date(date.getTime() + (new Date(`1970/01/01 ${eventData.endTime}`).getTime() - new Date(`1970/01/01 ${eventData.startTime}`).getTime())).toTimeString().slice(0, 5),\n        }));\n      }\n\n      setEvents(prevEvents => [...prevEvents, ...eventsToAdd]);\n      setCreateModalOpen(false);\n      setNewEvent({\n        title: '',\n        description: '',\n        startTime: '',\n        endTime: '',\n        category: 'Work',\n        priority: 'Medium',\n        recurring: false,\n        date: getLocalDateString(selectedDate),\n      });\n    }\n  };\n\n  return (\n    <div className=\"calendar-view\">\n      <FullCalendar\n        ref={calendarRef}\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n        initialView=\"timeGridWeek\"\n        headerToolbar={{\n          left: 'prev,next today',\n          center: 'title',\n          right: 'timeGridWeek,timeGridDay'\n        }}\n        editable={true}\n        selectable={true}\n        selectMirror={true}\n        dayMaxEvents={true}\n        weekends={true}\n        initialDate={selectedDate}\n        events={events.map(event => ({\n          id: event.taskId,\n          title: event.title,\n          start: `${event.date}T${event.startTime}`,\n          end: `${event.date}T${event.endTime}`,\n          className: `priority-${event.priority.toLowerCase()}`,\n          extendedProps: event\n        }))}\n        dateClick={handleDateClick}\n        eventClick={handleEventClick}\n        eventDrop={handleEventDrop}\n      />\n      {recurringModalOpen && (\n        <RecurringOptionsModal\n          isOpen={recurringModalOpen}\n          onClose={() => setRecurringModalOpen(false)}\n          onSave={handleRecurringOptionsSave}\n          initialOptions={recurringOptions}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default WeekView; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AACnE,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,SAASC,MAAM,EAAEC,YAAY,EAAEC,UAAU,EAAEC,iBAAiB,EAAEC,WAAW,EAAEC,SAAS,QAAQ,UAAU;;AAEtG;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,GAAIC,IAAI,IAAK;EACnC,MAAMC,CAAC,GAAG,IAAIC,IAAI,CAACF,IAAI,CAAC;EACxB,MAAMG,IAAI,GAAGF,CAAC,CAACG,WAAW,CAAC,CAAC;EAC5B,MAAMC,KAAK,GAAGC,MAAM,CAACL,CAAC,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACzD,MAAMC,GAAG,GAAGH,MAAM,CAACL,CAAC,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAChD,OAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,EAAE;AAClC,CAAC;;AAED;AACA,MAAME,sBAAsB,GAAGA,CAACC,SAAS,EAAEC,gBAAgB,KAAK;EAC9D,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,KAAK,GAAG,IAAIb,IAAI,CAACU,SAAS,CAAC;EACjC,MAAMI,GAAG,GAAG,IAAId,IAAI,CAACW,gBAAgB,CAACI,OAAO,CAAC;EAC9C,IAAIC,WAAW,GAAG,IAAIhB,IAAI,CAACa,KAAK,CAAC;EAEjC,OAAOG,WAAW,IAAIF,GAAG,EAAE;IACzB,IAAIH,gBAAgB,CAACM,SAAS,KAAK,OAAO,EAAE;MAC1CL,KAAK,CAACM,IAAI,CAAC,IAAIlB,IAAI,CAACgB,WAAW,CAAC,CAAC;MACjCA,WAAW,CAACG,OAAO,CAACH,WAAW,CAACR,OAAO,CAAC,CAAC,GAAGG,gBAAgB,CAACS,QAAQ,CAAC;IACxE,CAAC,MAAM,IAAIT,gBAAgB,CAACM,SAAS,KAAK,QAAQ,EAAE;MAClD,IAAIN,gBAAgB,CAACU,QAAQ,CAACC,QAAQ,CAACN,WAAW,CAACO,MAAM,CAAC,CAAC,CAAC,EAAE;QAC5DX,KAAK,CAACM,IAAI,CAAC,IAAIlB,IAAI,CAACgB,WAAW,CAAC,CAAC;MACnC;MACAA,WAAW,CAACG,OAAO,CAACH,WAAW,CAACR,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C,IAAIQ,WAAW,CAACO,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9BP,WAAW,CAACG,OAAO,CAACH,WAAW,CAACR,OAAO,CAAC,CAAC,GAAG,CAACG,gBAAgB,CAACS,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;MAClF;IACF,CAAC,MAAM,IAAIT,gBAAgB,CAACM,SAAS,KAAK,SAAS,EAAE;MACnDL,KAAK,CAACM,IAAI,CAAC,IAAIlB,IAAI,CAACgB,WAAW,CAAC,CAAC;MACjCA,WAAW,CAACQ,QAAQ,CAACR,WAAW,CAACX,QAAQ,CAAC,CAAC,GAAGM,gBAAgB,CAACS,QAAQ,CAAC;IAC1E,CAAC,MAAM,IAAIT,gBAAgB,CAACM,SAAS,KAAK,QAAQ,EAAE;MAClDL,KAAK,CAACM,IAAI,CAAC,IAAIlB,IAAI,CAACgB,WAAW,CAAC,CAAC;MACjCA,WAAW,CAACS,WAAW,CAACT,WAAW,CAACd,WAAW,CAAC,CAAC,GAAGS,gBAAgB,CAACS,QAAQ,CAAC;IAChF;EACF;EAEA,OAAOR,KAAK;AACd,CAAC;AAED,SAASc,QAAQA,CAAC;EAAEC,YAAY;EAAEC,eAAe;EAAEC,MAAM;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACtE,MAAMC,WAAW,GAAGpD,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM,CAACqD,eAAe,EAAEC,kBAAkB,CAAC,GAAGpD,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACqD,aAAa,EAAEC,gBAAgB,CAAC,GAAGtD,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACuD,aAAa,EAAEC,gBAAgB,CAAC,GAAGxD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACyD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1D,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC6B,gBAAgB,EAAE8B,mBAAmB,CAAC,GAAG3D,QAAQ,CAAC;IACvDmC,SAAS,EAAE,OAAO;IAClBI,QAAQ,EAAE,EAAE;IACZN,OAAO,EAAE,EAAE;IACXK,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAM,CAACsB,QAAQ,EAAEC,WAAW,CAAC,GAAG7D,QAAQ,CAAC;IACvC8D,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,MAAM;IAChBC,QAAQ,EAAE,QAAQ;IAClBC,SAAS,EAAE,KAAK;IAChBpD,IAAI,EAAED,kBAAkB,CAAC8B,YAAY;EACvC,CAAC,CAAC;EACF,MAAM,CAACwB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtE,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACuE,aAAa,EAAEC,gBAAgB,CAAC,GAAGxE,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACyE,cAAc,EAAEC,iBAAiB,CAAC,GAAG1E,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAAC2E,YAAY,EAAEC,eAAe,CAAC,GAAG5E,QAAQ,CAAC,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,IAAImD,WAAW,CAAC2B,OAAO,EAAE;MACvB,MAAMC,WAAW,GAAG5B,WAAW,CAAC2B,OAAO,CAACE,MAAM,CAAC,CAAC;MAChDD,WAAW,CAACE,QAAQ,CAACnC,YAAY,CAAC;MAClCoC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAErC,YAAY,EAAE,aAAa,EAAE9B,kBAAkB,CAAC8B,YAAY,CAAC,CAAC;IACvH;EACF,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB9C,SAAS,CAAC,MAAM;IACdkF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEnC,MAAM,CAAC;EACzC,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMoC,eAAe,GAAIC,IAAI,IAAK;IAChC,MAAMpB,SAAS,GAAGoB,IAAI,CAACpE,IAAI,CAACqE,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGxB,SAAS,CAACyB,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IACzD,MAAMC,QAAQ,GAAG,CAACL,KAAK,GAAG,CAAC,IAAI,EAAE;IACjC,MAAMtB,OAAO,GAAG,GAAG2B,QAAQ,CAACC,QAAQ,CAAC,CAAC,CAACrE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIgE,OAAO,CAACK,QAAQ,CAAC,CAAC,CAACrE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;IAChG,MAAMsE,WAAW,GAAG/E,kBAAkB,CAACqE,IAAI,CAACpE,IAAI,CAAC;IACjDiE,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEE,IAAI,CAACpE,IAAI,EAAE,aAAa,EAAE8E,WAAW,CAAC;IACrFjC,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX5C,IAAI,EAAE8E,WAAW;MACjB9B,SAAS;MACTC;IACF,CAAC,CAAC;IACFb,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAM2C,gBAAgB,GAAIX,IAAI,IAAK;IACjC,MAAMY,KAAK,GAAGjD,MAAM,CAACkD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKf,IAAI,CAACY,KAAK,CAACI,EAAE,CAACP,QAAQ,CAAC,CAAC,CAAC;IACrE,IAAIG,KAAK,EAAE;MACTf,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEc,KAAK,CAAC;MACpCxC,gBAAgB,CAACwC,KAAK,CAAC;MACvB1C,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACL2B,OAAO,CAACoB,KAAK,CAAC,iBAAiBjB,IAAI,CAACY,KAAK,CAACI,EAAE,4BAA4B,EAAErD,MAAM,CAAC;IACnF;EACF,CAAC;EAED,MAAMuD,eAAe,GAAIlB,IAAI,IAAK;IAChC,MAAMmB,YAAY,GAAG;MACnB,GAAGnB,IAAI,CAACY,KAAK,CAACQ,aAAa;MAC3BL,MAAM,EAAEf,IAAI,CAACY,KAAK,CAACI,EAAE,CAACP,QAAQ,CAAC,CAAC;MAChC/B,KAAK,EAAEsB,IAAI,CAACY,KAAK,CAAClC,KAAK;MACvB9C,IAAI,EAAED,kBAAkB,CAACqE,IAAI,CAACY,KAAK,CAACjE,KAAK,CAAC;MAC1CiC,SAAS,EAAEoB,IAAI,CAACY,KAAK,CAACjE,KAAK,CAACsD,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACtDrB,OAAO,EAAEmB,IAAI,CAACY,KAAK,CAAChE,GAAG,GAAGoD,IAAI,CAACY,KAAK,CAAChE,GAAG,CAACqD,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGF,IAAI,CAACY,KAAK,CAACjE,KAAK,CAACsD,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACjHmB,QAAQ,EAAErB,IAAI,CAACY,KAAK,CAACQ,aAAa,CAACC,QAAQ,IAAI;QAAEC,SAAS,EAAE,aAAa;QAAEC,WAAW,EAAE,IAAIzF,IAAI,CAAC,CAAC,CAAC0F,WAAW,CAAC;MAAE;IACnH,CAAC;IACD3B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEqB,YAAY,CAAC;IAC3CvD,SAAS,CAAC6D,UAAU,IAClBA,UAAU,CAACnB,GAAG,CAACoB,EAAE,IAAKA,EAAE,CAACX,MAAM,KAAKI,YAAY,CAACJ,MAAM,GAAGI,YAAY,GAAGO,EAAG,CAC9E,CAAC;EACH,CAAC;EAED,MAAMC,qBAAqB,GAAIC,OAAO,IAAK;IACzC,IAAIzD,aAAa,EAAE;MACjBC,gBAAgB,CAAC;QAAE,GAAGD,aAAa;QAAEa,SAAS,EAAE4C;MAAQ,CAAC,CAAC;MAC1D,IAAIA,OAAO,EAAE;QACXtD,qBAAqB,CAAC,IAAI,CAAC;MAC7B;IACF,CAAC,MAAM;MACLG,WAAW,CAAC;QAAE,GAAGD,QAAQ;QAAEQ,SAAS,EAAE4C;MAAQ,CAAC,CAAC;MAChD,IAAIA,OAAO,EAAE;QACXtD,qBAAqB,CAAC,IAAI,CAAC;MAC7B;IACF;EACF,CAAC;EAED,MAAMuD,0BAA0B,GAAIC,OAAO,IAAK;IAC9C,IAAI3D,aAAa,EAAE;MACjBC,gBAAgB,CAAC;QAAE,GAAGD,aAAa;QAAE1B,gBAAgB,EAAEqF;MAAQ,CAAC,CAAC;IACnE,CAAC,MAAM;MACLrD,WAAW,CAAC;QAAE,GAAGD,QAAQ;QAAE/B,gBAAgB,EAAEqF;MAAQ,CAAC,CAAC;IACzD;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIvD,QAAQ,CAACE,KAAK,CAACsD,IAAI,CAAC,CAAC,IAAIxD,QAAQ,CAACI,SAAS,IAAIJ,QAAQ,CAACK,OAAO,EAAE;MACnE,MAAMoD,SAAS,GAAG;QAChBlB,MAAM,EAAEjF,IAAI,CAACoG,GAAG,CAAC,CAAC,CAACzB,QAAQ,CAAC,CAAC;QAC7B/B,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBC,WAAW,EAAEH,QAAQ,CAACG,WAAW,IAAI,EAAE;QACvCC,SAAS,EAAEJ,QAAQ,CAACI,SAAS;QAC7BC,OAAO,EAAEL,QAAQ,CAACK,OAAO;QACzBC,QAAQ,EAAEN,QAAQ,CAACM,QAAQ;QAC3BC,QAAQ,EAAEP,QAAQ,CAACO,QAAQ,IAAI,QAAQ;QACvCC,SAAS,EAAER,QAAQ,CAACQ,SAAS;QAC7BvC,gBAAgB,EAAE+B,QAAQ,CAACQ,SAAS,GAAGR,QAAQ,CAAC/B,gBAAgB,GAAG,IAAI;QACvEb,IAAI,EAAE4C,QAAQ,CAAC5C,IAAI;QACnByF,QAAQ,EAAE;UAAEC,SAAS,EAAE,aAAa;UAAEC,WAAW,EAAE,IAAIzF,IAAI,CAAC,CAAC,CAAC0F,WAAW,CAAC;QAAE;MAC9E,CAAC;MAED,IAAIW,WAAW,GAAG,CAACF,SAAS,CAAC;MAE7B,IAAIA,SAAS,CAACjD,SAAS,IAAIiD,SAAS,CAACxF,gBAAgB,EAAE;QACrD,MAAM2F,cAAc,GAAG7F,sBAAsB,CAC3C,IAAIT,IAAI,CAAC,GAAGmG,SAAS,CAACrG,IAAI,IAAIqG,SAAS,CAACrD,SAAS,EAAE,CAAC,EACpDqD,SAAS,CAACxF,gBACZ,CAAC;QAED0F,WAAW,GAAGC,cAAc,CAAC9B,GAAG,CAAC,CAAC1E,IAAI,EAAEyG,KAAK,MAAM;UACjD,GAAGJ,SAAS;UACZlB,MAAM,EAAE,GAAGkB,SAAS,CAAClB,MAAM,IAAIsB,KAAK,EAAE;UACtCzG,IAAI,EAAED,kBAAkB,CAACC,IAAI,CAAC;UAC9BgD,SAAS,EAAEhD,IAAI,CAACqE,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC1CrB,OAAO,EAAE,IAAI/C,IAAI,CAACF,IAAI,CAAC0G,OAAO,CAAC,CAAC,IAAI,IAAIxG,IAAI,CAAC,cAAcmG,SAAS,CAACpD,OAAO,EAAE,CAAC,CAACyD,OAAO,CAAC,CAAC,GAAG,IAAIxG,IAAI,CAAC,cAAcmG,SAAS,CAACrD,SAAS,EAAE,CAAC,CAAC0D,OAAO,CAAC,CAAC,CAAC,CAAC,CAACrC,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC;QACjL,CAAC,CAAC,CAAC;MACL;MAEAtC,SAAS,CAAC6D,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAE,GAAGU,WAAW,CAAC,CAAC;MACxDnE,kBAAkB,CAAC,KAAK,CAAC;MACzBS,WAAW,CAAC;QACVC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE,MAAM;QAChBC,QAAQ,EAAE,QAAQ;QAClBC,SAAS,EAAE,KAAK;QAChBpD,IAAI,EAAED,kBAAkB,CAAC8B,YAAY;MACvC,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACE/B,OAAA;IAAK6G,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B9G,OAAA,CAACZ,YAAY;MACX2H,GAAG,EAAE3E,WAAY;MACjB4E,OAAO,EAAE,CAAC3H,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAE;MAC5D0H,WAAW,EAAC,cAAc;MAC1BC,aAAa,EAAE;QACbC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE;MACT,CAAE;MACFC,QAAQ,EAAE,IAAK;MACfC,UAAU,EAAE,IAAK;MACjBC,YAAY,EAAE,IAAK;MACnBC,YAAY,EAAE,IAAK;MACnBC,QAAQ,EAAE,IAAK;MACfC,WAAW,EAAE5F,YAAa;MAC1BE,MAAM,EAAEA,MAAM,CAAC2C,GAAG,CAACM,KAAK,KAAK;QAC3BI,EAAE,EAAEJ,KAAK,CAACG,MAAM;QAChBrC,KAAK,EAAEkC,KAAK,CAAClC,KAAK;QAClB/B,KAAK,EAAE,GAAGiE,KAAK,CAAChF,IAAI,IAAIgF,KAAK,CAAChC,SAAS,EAAE;QACzChC,GAAG,EAAE,GAAGgE,KAAK,CAAChF,IAAI,IAAIgF,KAAK,CAAC/B,OAAO,EAAE;QACrC0D,SAAS,EAAE,YAAY3B,KAAK,CAAC7B,QAAQ,CAACuE,WAAW,CAAC,CAAC,EAAE;QACrDlC,aAAa,EAAER;MACjB,CAAC,CAAC,CAAE;MACJ2C,SAAS,EAAExD,eAAgB;MAC3ByD,UAAU,EAAE7C,gBAAiB;MAC7B8C,SAAS,EAAEvC;IAAgB;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDxF,kBAAkB,iBACjB3C,OAAA,CAACR,qBAAqB;MACpB4I,MAAM,EAAEzF,kBAAmB;MAC3B0F,OAAO,EAAEA,CAAA,KAAMzF,qBAAqB,CAAC,KAAK,CAAE;MAC5C0F,MAAM,EAAEnC,0BAA2B;MACnCoC,cAAc,EAAExH;IAAiB;MAAAiH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChG,EAAA,CA/LQL,QAAQ;AAAA0G,EAAA,GAAR1G,QAAQ;AAiMjB,eAAeA,QAAQ;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}